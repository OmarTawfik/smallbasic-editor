// <copyright file="CSInteropTypes.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Editor.Interop
{
    using System.Threading.Tasks;
    using Microsoft.JSInterop;
    using SuperBasic.Editor.Libraries;

    internal interface IGraphicsInterop
    {
        Task NotifyButtonClicked(string buttonName);

        Task NotifyTextBoxControlEntry(string textBoxName);

        Task NotifyGraphicsWindowTextEntry(decimal keyCode);

        Task NotifyKeyDown(decimal keyCode);

        Task NotifyKeyUp(decimal keyCode);

        Task NotifyMouseDown(decimal x, decimal y);

        Task NotifyMouseMove(decimal x, decimal y);

        Task NotifyMouseUp(decimal x, decimal y);
    }

    internal interface IFileInterop
    {
        Task ReportFileError(string error);
    }

    public static class CSInterop
    {
        private static IGraphicsInterop graphics;

        private static IFileInterop file;

        [JSInvokable("CSIntrop.Graphics.NotifyButtonClicked")]
        public static async Task<bool> Graphics_NotifyButtonClicked(string buttonName)
        {
            await graphics.NotifyButtonClicked(buttonName);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyTextBoxControlEntry")]
        public static async Task<bool> Graphics_NotifyTextBoxControlEntry(string textBoxName)
        {
            await graphics.NotifyTextBoxControlEntry(textBoxName);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyGraphicsWindowTextEntry")]
        public static async Task<bool> Graphics_NotifyGraphicsWindowTextEntry(decimal keyCode)
        {
            await graphics.NotifyGraphicsWindowTextEntry(keyCode);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyKeyDown")]
        public static async Task<bool> Graphics_NotifyKeyDown(decimal keyCode)
        {
            await graphics.NotifyKeyDown(keyCode);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyKeyUp")]
        public static async Task<bool> Graphics_NotifyKeyUp(decimal keyCode)
        {
            await graphics.NotifyKeyUp(keyCode);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyMouseDown")]
        public static async Task<bool> Graphics_NotifyMouseDown(decimal x, decimal y)
        {
            await graphics.NotifyMouseDown(x, y);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyMouseMove")]
        public static async Task<bool> Graphics_NotifyMouseMove(decimal x, decimal y)
        {
            await graphics.NotifyMouseMove(x, y);
            return true;
        }

        [JSInvokable("CSIntrop.Graphics.NotifyMouseUp")]
        public static async Task<bool> Graphics_NotifyMouseUp(decimal x, decimal y)
        {
            await graphics.NotifyMouseUp(x, y);
            return true;
        }

        [JSInvokable("CSIntrop.File.ReportFileError")]
        public static async Task<bool> File_ReportFileError(string error)
        {
            await file.ReportFileError(error);
            return true;
        }

        internal static void Initialize(LibrariesCollection libraries)
        {
            graphics = new GraphicsInterop(libraries);
            file = new FileInterop(libraries);
        }
    }
}
