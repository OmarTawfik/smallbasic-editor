// <copyright file="JSInteropTypes.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Editor.Interop
{
    using System.Threading.Tasks;
    using Microsoft.JSInterop;

    internal static class JSInterop
    {
        public static class Controls
        {
            public static async Task Initialize(string containerId)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.initialize", containerId);
            }

            public static async Task Dispose()
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.dispose");
            }

            public static async Task<string> AddButton(string caption, decimal left, decimal top)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Controls.addButton", caption, left, top);
            }

            public static async Task<string> AddTextBox(bool isMultiLine, decimal left, decimal top)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Controls.addTextBox", isMultiLine, left, top);
            }

            public static async Task<string> GetButtonCaption(string buttonName)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Controls.getButtonCaption", buttonName);
            }

            public static async Task<string> GetTextBoxText(string textBoxName)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Controls.getTextBoxText", textBoxName);
            }

            public static async Task HideControl(string controlName)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.hideControl", controlName);
            }

            public static async Task MoveControl(string controlName, decimal x, decimal y)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.moveControl", controlName, x, y);
            }

            public static async Task RemoveControl(string controlName)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.removeControl", controlName);
            }

            public static async Task SetButtonCaption(string buttonName, string caption)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.setButtonCaption", buttonName, caption);
            }

            public static async Task SetTextBoxText(string textBoxName, string text)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.setTextBoxText", textBoxName, text);
            }

            public static async Task SetSize(string controlName, decimal width, decimal height)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.setSize", controlName, width, height);
            }

            public static async Task ShowControl(string controlName)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Controls.showControl", controlName);
            }

            public static async Task<decimal> GetHeight()
            {
                return await JSRuntime.Current.InvokeAsync<decimal>("JSIntrop.Controls.getHeight");
            }

            public static async Task<decimal> GetWidth()
            {
                return await JSRuntime.Current.InvokeAsync<decimal>("JSIntrop.Controls.getWidth");
            }
        }

        public static class Graphics
        {
            public static async Task Initialize(string containerId)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.initialize", containerId);
            }

            public static async Task Dispose()
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.dispose");
            }

            public static async Task Clear()
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.clear");
            }

            public static async Task<string> GetBackgroundColor()
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Graphics.getBackgroundColor");
            }

            public static async Task SetBackgroundColor(string backgroundColor)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setBackgroundColor", backgroundColor);
            }

            public static async Task<string> GetBrushColor()
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Graphics.getBrushColor");
            }

            public static async Task SetBrushColor(string brushColor)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setBrushColor", brushColor);
            }

            public static async Task<string> GetPenColor()
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Graphics.getPenColor");
            }

            public static async Task SetPenColor(string penColor)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setPenColor", penColor);
            }

            public static async Task<decimal> GetPenWidth()
            {
                return await JSRuntime.Current.InvokeAsync<decimal>("JSIntrop.Graphics.getPenWidth");
            }

            public static async Task SetPenWidth(decimal penWidth)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setPenWidth", penWidth);
            }

            public static async Task<bool> GetFontBold()
            {
                return await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.getFontBold");
            }

            public static async Task SetFontBold(bool fontBold)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setFontBold", fontBold);
            }

            public static async Task<bool> GetFontItalic()
            {
                return await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.getFontItalic");
            }

            public static async Task SetFontItalic(bool fontItalic)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setFontItalic", fontItalic);
            }

            public static async Task<string> GetFontName()
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Graphics.getFontName");
            }

            public static async Task SetFontName(string fontName)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setFontName", fontName);
            }

            public static async Task<decimal> GetFontSize()
            {
                return await JSRuntime.Current.InvokeAsync<decimal>("JSIntrop.Graphics.getFontSize");
            }

            public static async Task SetFontSize(decimal fontSize)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setFontSize", fontSize);
            }

            public static async Task DrawBoundText(decimal x, decimal y, decimal width, string text)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawBoundText", x, y, width, text);
            }

            public static async Task DrawEllipse(decimal x, decimal y, decimal width, decimal height)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawEllipse", x, y, width, height);
            }

            public static async Task DrawImage(string imageName, decimal x, decimal y)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawImage", imageName, x, y);
            }

            public static async Task DrawLine(decimal x1, decimal y1, decimal x2, decimal y2)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawLine", x1, y1, x2, y2);
            }

            public static async Task DrawRectangle(decimal x, decimal y, decimal width, decimal height)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawRectangle", x, y, width, height);
            }

            public static async Task DrawResizedImage(string imageName, decimal x, decimal y, decimal width, decimal height)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawResizedImage", imageName, x, y, width, height);
            }

            public static async Task DrawText(decimal x, decimal y, string text)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawText", x, y, text);
            }

            public static async Task DrawTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.drawTriangle", x1, y1, x2, y2, x3, y3);
            }

            public static async Task FillEllipse(decimal x, decimal y, decimal width, decimal height)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.fillEllipse", x, y, width, height);
            }

            public static async Task FillRectangle(decimal x, decimal y, decimal width, decimal height)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.fillRectangle", x, y, width, height);
            }

            public static async Task FillTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.fillTriangle", x1, y1, x2, y2, x3, y3);
            }

            public static async Task<string> GetPixel(decimal x, decimal y)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Graphics.getPixel", x, y);
            }

            public static async Task SetPixel(decimal x, decimal y, string color)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.setPixel", x, y, color);
            }

            public static async Task ShowMessage(string text, string title)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Graphics.showMessage", text, title);
            }
        }

        public static class Desktop
        {
            public static async Task<decimal> GetHeight()
            {
                return await JSRuntime.Current.InvokeAsync<decimal>("JSIntrop.Desktop.getHeight");
            }

            public static async Task<decimal> GetWidth()
            {
                return await JSRuntime.Current.InvokeAsync<decimal>("JSIntrop.Desktop.getWidth");
            }

            public static async Task SetWallPaperFromFile(string filePath)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Desktop.setWallPaperFromFile", filePath);
            }

            public static async Task SetWallPaperFromUrl(string url)
            {
                await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Desktop.setWallPaperFromUrl", url);
            }
        }

        public static class File
        {
            public static async Task<string> AppendContents(string filePath, string contents)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.appendContents", filePath, contents);
            }

            public static async Task<string> CopyFile(string sourceFilePath, string destinationFilePath)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.copyFile", sourceFilePath, destinationFilePath);
            }

            public static async Task<string> CreateDirectory(string directoryPath)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.createDirectory", directoryPath);
            }

            public static async Task<string> DeleteDirectory(string directoryPath)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.deleteDirectory", directoryPath);
            }

            public static async Task<string> DeleteFile(string filePath)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.deleteFile", filePath);
            }

            public static async Task<string[]> GetDirectories(string directoryPath)
            {
                return await JSRuntime.Current.InvokeAsync<string[]>("JSIntrop.File.getDirectories", directoryPath);
            }

            public static async Task<string[]> GetFiles(string directoryPath)
            {
                return await JSRuntime.Current.InvokeAsync<string[]>("JSIntrop.File.getFiles", directoryPath);
            }

            public static async Task<string> GetTemporaryFilePath()
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.getTemporaryFilePath");
            }

            public static async Task<string> InsertLine(string filePath, decimal lineNumber, string contents)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.insertLine", filePath, lineNumber, contents);
            }

            public static async Task<string> ReadContents(string filePath)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.readContents", filePath);
            }

            public static async Task<string> ReadLine(string filePath, decimal lineNumber)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.readLine", filePath, lineNumber);
            }

            public static async Task<string> WriteContents(string filePath, string contents)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.writeContents", filePath, contents);
            }

            public static async Task<string> WriteLine(string filePath, decimal lineNumber, string contents)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.File.writeLine", filePath, lineNumber, contents);
            }
        }

        public static class Images
        {
            public static async Task<string> GetImageUrl(string imageName)
            {
                return await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Images.getImageUrl", imageName);
            }
        }
    }
}
