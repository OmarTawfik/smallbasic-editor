// <copyright file="GenerateDiagnosticCode.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

namespace SuperBasic.Generators.Diagnostics
{
    using System;
    using System.IO;
    using System.Linq;
    using SuperBasic.Utilities;

    public sealed class GenerateDiagnosticCode : BaseGeneratorTask
    {
        protected override void ExecuteConversion()
        {
            this.WriteFile<DiagnosticsModels.DiagnosticsCollection>(
                inputFilePath: Path.Combine(this.RootDirectory, "Source", "SuperBasic.Generators", "Diagnostics", "Input.xml"),
                outputFilePath: Path.Combine(this.RootDirectory, "Source", "SuperBasic.Compiler", "Diagnostics", "DiagnosticCode.Generated.cs"),
                converter: root =>
$@"// <copyright file=""DiagnosticCode.Generated.cs"" company=""2018 Omar Tawfik"">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Compiler.Diagnostics
{{
    using SuperBasic.Utilities;
    using SuperBasic.Utilities.Resources;

    public enum DiagnosticCode
    {{
{root.Select(diagnostic => $"        {diagnostic.Name},").Join(Environment.NewLine)}
    }}

    internal static partial class DiagnosticCodeExtensions
    {{
        public static string ToDisplayString(this DiagnosticCode kind)
        {{
            switch (kind)
            {{
{root.Select(diagnostic => $"                case DiagnosticCode.{diagnostic.Name}: return DiagnosticsResources.{diagnostic.Name};").Join(Environment.NewLine)}
                default: throw ExceptionUtilities.UnexpectedValue(kind);
            }}
        }}
    }}
}}
");
        }
    }
}
