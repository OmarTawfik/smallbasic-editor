/*!
 * Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
 */

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
import { ControlsInterop } from "./ControlsInterop";
import { GraphicsInterop } from "./GraphicsInterop";
import { DesktopInterop } from "./DesktopInterop";
import { FileInterop } from "./FileInterop";
import { ImagesInterop } from "./ImagesInterop";

interface IControlsExternal {
    initialize(containerId: string): Promise<boolean>;
    dispose(): Promise<boolean>;
    addButton(caption: string, left: number, top: number): Promise<string>;
    addTextBox(isMultiLine: boolean, left: number, top: number): Promise<string>;
    getButtonCaption(buttonName: string): Promise<string>;
    getTextBoxText(textBoxName: string): Promise<string>;
    hideControl(controlName: string): Promise<boolean>;
    moveControl(controlName: string, x: number, y: number): Promise<boolean>;
    removeControl(controlName: string): Promise<boolean>;
    setButtonCaption(buttonName: string, caption: string): Promise<boolean>;
    setTextBoxText(textBoxName: string, text: string): Promise<boolean>;
    setSize(controlName: string, width: number, height: number): Promise<boolean>;
    showControl(controlName: string): Promise<boolean>;
    getHeight(): Promise<number>;
    getWidth(): Promise<number>;
}

interface IGraphicsExternal {
    initialize(containerId: string): Promise<boolean>;
    dispose(): Promise<boolean>;
    clear(): Promise<boolean>;
    getBackgroundColor(): Promise<string>;
    setBackgroundColor(backgroundColor: string): Promise<boolean>;
    getBrushColor(): Promise<string>;
    setBrushColor(brushColor: string): Promise<boolean>;
    getPenColor(): Promise<string>;
    setPenColor(penColor: string): Promise<boolean>;
    getPenWidth(): Promise<number>;
    setPenWidth(penWidth: number): Promise<boolean>;
    getFontBold(): Promise<boolean>;
    setFontBold(fontBold: boolean): Promise<boolean>;
    getFontItalic(): Promise<boolean>;
    setFontItalic(fontItalic: boolean): Promise<boolean>;
    getFontName(): Promise<string>;
    setFontName(fontName: string): Promise<boolean>;
    getFontSize(): Promise<number>;
    setFontSize(fontSize: number): Promise<boolean>;
    drawBoundText(x: number, y: number, width: number, text: string): Promise<boolean>;
    drawEllipse(x: number, y: number, width: number, height: number): Promise<boolean>;
    drawImage(imageName: string, x: number, y: number): Promise<boolean>;
    drawLine(x1: number, y1: number, x2: number, y2: number): Promise<boolean>;
    drawRectangle(x: number, y: number, width: number, height: number): Promise<boolean>;
    drawResizedImage(imageName: string, x: number, y: number, width: number, height: number): Promise<boolean>;
    drawText(x: number, y: number, text: string): Promise<boolean>;
    drawTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): Promise<boolean>;
    fillEllipse(x: number, y: number, width: number, height: number): Promise<boolean>;
    fillRectangle(x: number, y: number, width: number, height: number): Promise<boolean>;
    fillTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): Promise<boolean>;
    getPixel(x: number, y: number): Promise<string>;
    setPixel(x: number, y: number, color: string): Promise<boolean>;
    showMessage(text: string, title: string): Promise<boolean>;
}

interface IDesktopExternal {
    getHeight(): Promise<number>;
    getWidth(): Promise<number>;
    setWallPaperFromFile(filePath: string): Promise<boolean>;
    setWallPaperFromUrl(url: string): Promise<boolean>;
}

interface IFileExternal {
    appendContents(filePath: string, contents: string): Promise<string>;
    copyFile(sourceFilePath: string, destinationFilePath: string): Promise<string>;
    createDirectory(directoryPath: string): Promise<string>;
    deleteDirectory(directoryPath: string): Promise<string>;
    deleteFile(filePath: string): Promise<string>;
    getDirectories(directoryPath: string): Promise<string[]>;
    getFiles(directoryPath: string): Promise<string[]>;
    getTemporaryFilePath(): Promise<string>;
    insertLine(filePath: string, lineNumber: number, contents: string): Promise<string>;
    readContents(filePath: string): Promise<string>;
    readLine(filePath: string, lineNumber: number): Promise<string>;
    writeContents(filePath: string, contents: string): Promise<string>;
    writeLine(filePath: string, lineNumber: number, contents: string): Promise<string>;
}

interface IImagesExternal {
    getImageUrl(imageName: string): Promise<string>;
}

export interface IControlsInterop {
    initialize(containerId: string): Promise<void>;
    dispose(): Promise<void>;
    addButton(caption: string, left: number, top: number): Promise<string>;
    addTextBox(isMultiLine: boolean, left: number, top: number): Promise<string>;
    getButtonCaption(buttonName: string): Promise<string>;
    getTextBoxText(textBoxName: string): Promise<string>;
    hideControl(controlName: string): Promise<void>;
    moveControl(controlName: string, x: number, y: number): Promise<void>;
    removeControl(controlName: string): Promise<void>;
    setButtonCaption(buttonName: string, caption: string): Promise<void>;
    setTextBoxText(textBoxName: string, text: string): Promise<void>;
    setSize(controlName: string, width: number, height: number): Promise<void>;
    showControl(controlName: string): Promise<void>;
    getHeight(): Promise<number>;
    getWidth(): Promise<number>;
}

export interface IGraphicsInterop {
    initialize(containerId: string): Promise<void>;
    dispose(): Promise<void>;
    clear(): Promise<void>;
    getBackgroundColor(): Promise<string>;
    setBackgroundColor(backgroundColor: string): Promise<void>;
    getBrushColor(): Promise<string>;
    setBrushColor(brushColor: string): Promise<void>;
    getPenColor(): Promise<string>;
    setPenColor(penColor: string): Promise<void>;
    getPenWidth(): Promise<number>;
    setPenWidth(penWidth: number): Promise<void>;
    getFontBold(): Promise<boolean>;
    setFontBold(fontBold: boolean): Promise<void>;
    getFontItalic(): Promise<boolean>;
    setFontItalic(fontItalic: boolean): Promise<void>;
    getFontName(): Promise<string>;
    setFontName(fontName: string): Promise<void>;
    getFontSize(): Promise<number>;
    setFontSize(fontSize: number): Promise<void>;
    drawBoundText(x: number, y: number, width: number, text: string): Promise<void>;
    drawEllipse(x: number, y: number, width: number, height: number): Promise<void>;
    drawImage(imageName: string, x: number, y: number): Promise<void>;
    drawLine(x1: number, y1: number, x2: number, y2: number): Promise<void>;
    drawRectangle(x: number, y: number, width: number, height: number): Promise<void>;
    drawResizedImage(imageName: string, x: number, y: number, width: number, height: number): Promise<void>;
    drawText(x: number, y: number, text: string): Promise<void>;
    drawTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): Promise<void>;
    fillEllipse(x: number, y: number, width: number, height: number): Promise<void>;
    fillRectangle(x: number, y: number, width: number, height: number): Promise<void>;
    fillTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): Promise<void>;
    getPixel(x: number, y: number): Promise<string>;
    setPixel(x: number, y: number, color: string): Promise<void>;
    showMessage(text: string, title: string): Promise<void>;
}

export interface IDesktopInterop {
    getHeight(): Promise<number>;
    getWidth(): Promise<number>;
    setWallPaperFromFile(filePath: string): Promise<void>;
    setWallPaperFromUrl(url: string): Promise<void>;
}

export interface IFileInterop {
    appendContents(filePath: string, contents: string): Promise<string>;
    copyFile(sourceFilePath: string, destinationFilePath: string): Promise<string>;
    createDirectory(directoryPath: string): Promise<string>;
    deleteDirectory(directoryPath: string): Promise<string>;
    deleteFile(filePath: string): Promise<string>;
    getDirectories(directoryPath: string): Promise<string[]>;
    getFiles(directoryPath: string): Promise<string[]>;
    getTemporaryFilePath(): Promise<string>;
    insertLine(filePath: string, lineNumber: number, contents: string): Promise<string>;
    readContents(filePath: string): Promise<string>;
    readLine(filePath: string, lineNumber: number): Promise<string>;
    writeContents(filePath: string, contents: string): Promise<string>;
    writeLine(filePath: string, lineNumber: number, contents: string): Promise<string>;
}

export interface IImagesInterop {
    getImageUrl(imageName: string): Promise<string>;
}

declare global {
    export module JSInterop {
        export const Controls: IControlsExternal;
        export const Graphics: IGraphicsExternal;
        export const Desktop: IDesktopExternal;
        export const File: IFileExternal;
        export const Images: IImagesExternal;
    }
}

export function initializeGlobalNamespace(): void {
    const controls: IControlsInterop = new ControlsInterop();
    const graphics: IGraphicsInterop = new GraphicsInterop();
    const desktop: IDesktopInterop = new DesktopInterop();
    const file: IFileInterop = new FileInterop();
    const images: IImagesInterop = new ImagesInterop();

    (<any>global).JSInterop = {
        Controls: {
            initialize: (containerId: string) => controls.initialize(containerId).then(() => Promise.resolve(true)),
            dispose: () => controls.dispose().then(() => Promise.resolve(true)),
            addButton: controls.addButton,
            addTextBox: controls.addTextBox,
            getButtonCaption: controls.getButtonCaption,
            getTextBoxText: controls.getTextBoxText,
            hideControl: (controlName: string) => controls.hideControl(controlName).then(() => Promise.resolve(true)),
            moveControl: (controlName: string, x: number, y: number) => controls.moveControl(controlName, x, y).then(() => Promise.resolve(true)),
            removeControl: (controlName: string) => controls.removeControl(controlName).then(() => Promise.resolve(true)),
            setButtonCaption: (buttonName: string, caption: string) => controls.setButtonCaption(buttonName, caption).then(() => Promise.resolve(true)),
            setTextBoxText: (textBoxName: string, text: string) => controls.setTextBoxText(textBoxName, text).then(() => Promise.resolve(true)),
            setSize: (controlName: string, width: number, height: number) => controls.setSize(controlName, width, height).then(() => Promise.resolve(true)),
            showControl: (controlName: string) => controls.showControl(controlName).then(() => Promise.resolve(true)),
            getHeight: controls.getHeight,
            getWidth: controls.getWidth
        },
        Graphics: {
            initialize: (containerId: string) => graphics.initialize(containerId).then(() => Promise.resolve(true)),
            dispose: () => graphics.dispose().then(() => Promise.resolve(true)),
            clear: () => graphics.clear().then(() => Promise.resolve(true)),
            getBackgroundColor: graphics.getBackgroundColor,
            setBackgroundColor: (backgroundColor: string) => graphics.setBackgroundColor(backgroundColor).then(() => Promise.resolve(true)),
            getBrushColor: graphics.getBrushColor,
            setBrushColor: (brushColor: string) => graphics.setBrushColor(brushColor).then(() => Promise.resolve(true)),
            getPenColor: graphics.getPenColor,
            setPenColor: (penColor: string) => graphics.setPenColor(penColor).then(() => Promise.resolve(true)),
            getPenWidth: graphics.getPenWidth,
            setPenWidth: (penWidth: number) => graphics.setPenWidth(penWidth).then(() => Promise.resolve(true)),
            getFontBold: graphics.getFontBold,
            setFontBold: (fontBold: boolean) => graphics.setFontBold(fontBold).then(() => Promise.resolve(true)),
            getFontItalic: graphics.getFontItalic,
            setFontItalic: (fontItalic: boolean) => graphics.setFontItalic(fontItalic).then(() => Promise.resolve(true)),
            getFontName: graphics.getFontName,
            setFontName: (fontName: string) => graphics.setFontName(fontName).then(() => Promise.resolve(true)),
            getFontSize: graphics.getFontSize,
            setFontSize: (fontSize: number) => graphics.setFontSize(fontSize).then(() => Promise.resolve(true)),
            drawBoundText: (x: number, y: number, width: number, text: string) => graphics.drawBoundText(x, y, width, text).then(() => Promise.resolve(true)),
            drawEllipse: (x: number, y: number, width: number, height: number) => graphics.drawEllipse(x, y, width, height).then(() => Promise.resolve(true)),
            drawImage: (imageName: string, x: number, y: number) => graphics.drawImage(imageName, x, y).then(() => Promise.resolve(true)),
            drawLine: (x1: number, y1: number, x2: number, y2: number) => graphics.drawLine(x1, y1, x2, y2).then(() => Promise.resolve(true)),
            drawRectangle: (x: number, y: number, width: number, height: number) => graphics.drawRectangle(x, y, width, height).then(() => Promise.resolve(true)),
            drawResizedImage: (imageName: string, x: number, y: number, width: number, height: number) => graphics.drawResizedImage(imageName, x, y, width, height).then(() => Promise.resolve(true)),
            drawText: (x: number, y: number, text: string) => graphics.drawText(x, y, text).then(() => Promise.resolve(true)),
            drawTriangle: (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) => graphics.drawTriangle(x1, y1, x2, y2, x3, y3).then(() => Promise.resolve(true)),
            fillEllipse: (x: number, y: number, width: number, height: number) => graphics.fillEllipse(x, y, width, height).then(() => Promise.resolve(true)),
            fillRectangle: (x: number, y: number, width: number, height: number) => graphics.fillRectangle(x, y, width, height).then(() => Promise.resolve(true)),
            fillTriangle: (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) => graphics.fillTriangle(x1, y1, x2, y2, x3, y3).then(() => Promise.resolve(true)),
            getPixel: graphics.getPixel,
            setPixel: (x: number, y: number, color: string) => graphics.setPixel(x, y, color).then(() => Promise.resolve(true)),
            showMessage: (text: string, title: string) => graphics.showMessage(text, title).then(() => Promise.resolve(true))
        },
        Desktop: {
            getHeight: desktop.getHeight,
            getWidth: desktop.getWidth,
            setWallPaperFromFile: (filePath: string) => desktop.setWallPaperFromFile(filePath).then(() => Promise.resolve(true)),
            setWallPaperFromUrl: (url: string) => desktop.setWallPaperFromUrl(url).then(() => Promise.resolve(true))
        },
        File: {
            appendContents: file.appendContents,
            copyFile: file.copyFile,
            createDirectory: file.createDirectory,
            deleteDirectory: file.deleteDirectory,
            deleteFile: file.deleteFile,
            getDirectories: file.getDirectories,
            getFiles: file.getFiles,
            getTemporaryFilePath: file.getTemporaryFilePath,
            insertLine: file.insertLine,
            readContents: file.readContents,
            readLine: file.readLine,
            writeContents: file.writeContents,
            writeLine: file.writeLine
        },
        Images: {
            getImageUrl: images.getImageUrl
        }
    };
}
