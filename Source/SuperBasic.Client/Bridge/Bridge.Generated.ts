/*!
 * Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
 */

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
import * as fs from "fs";
import * as os from "os";
import * as path from "path";
import * as child_process from "child_process";

const filePath = path.join(os.tmpdir(), `bridge-comm-${Math.random().toString().split(".")[1]}.json`);
const bridgeBinaryPath = path.resolve(__dirname, "_bridge", "SuperBasic.Bridge.dll");

(<any>global).Bridge = {
    Test: {
        TestMethod1: (val1: object): boolean => {
            fs.writeFileSync(filePath, JSON.stringify(val1));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Test", "TestMethod1", filePath]);
            return true;
        },
        TestMethod2: (): object => {
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Test", "TestMethod2", filePath]);
            return JSON.parse(fs.readFileSync(filePath, "utf8"));
        },
        TestMethod3: (): object => {
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Test", "TestMethod3", filePath]);
            return JSON.parse(fs.readFileSync(filePath, "utf8"));
        },
        TestMethod4: (val4: object): object => {
            fs.writeFileSync(filePath, JSON.stringify(val4));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Test", "TestMethod4", filePath]);
            return JSON.parse(fs.readFileSync(filePath, "utf8"));
        }
    }
};
