/*!
 * Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
 */

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
import { LayoutInterop } from "./LayoutInterop";
import { MonacoInterop } from "./MonacoInterop";

export interface ILayoutInterop {
    initializeWebView(locale: string, title: string): void;
    openExternalLink(url: string): void;
    attachSideBarEvents(upButton: HTMLElement, scrollContentsArea: HTMLElement, downButton: HTMLElement): void;
}

export interface IMonacoInterop {
    initialize(editorElement: HTMLElement, initialValue: string, isReadOnly: boolean): void;
}

declare global {
    export module JSInterop {
        export const Layout: ILayoutInterop;
        export const Monaco: IMonacoInterop;
    }
}

const layout: ILayoutInterop = new LayoutInterop();
const monaco: IMonacoInterop = new MonacoInterop();

(<any>global).JSInterop = {
    Layout: {
        initializeWebView: (locale: string, title: string) : boolean => {
            layout.initializeWebView(locale, title);
            return true;
        },
        openExternalLink: (url: string) : boolean => {
            layout.openExternalLink(url);
            return true;
        },
        attachSideBarEvents: (upButton: HTMLElement, scrollContentsArea: HTMLElement, downButton: HTMLElement) : boolean => {
            layout.attachSideBarEvents(upButton, scrollContentsArea, downButton);
            return true;
        }
    },
    Monaco: {
        initialize: (editorElement: HTMLElement, initialValue: string, isReadOnly: boolean) : boolean => {
            monaco.initialize(editorElement, initialValue, isReadOnly);
            return true;
        }
    }
};
