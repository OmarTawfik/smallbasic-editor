// <copyright file="Plugins.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Compiler.Runtime
{
    using System;
    using SuperBasic.Utilities;

    public interface IControlsPlugin
    {
        event Action ButtonClicked;

        event Action TextTyped;

        string LastClickedButton { get; }

        string LastTypedTextBox { get; }

        string AddButton(string caption, decimal left, decimal top);

        string AddMultiLineTextBox(decimal left, decimal top);

        string AddTextBox(decimal left, decimal top);

        string GetButtonCaption(string buttonName);

        string GetTextBoxText(string textBoxName);

        void HideControl(string controlName);

        void Move(string control, decimal x, decimal y);

        void Remove(string controlName);

        void SetButtonCaption(string buttonName, string caption);

        void SetSize(string control, decimal width, decimal height);

        void SetTextBoxText(string textBoxName, string text);

        void ShowControl(string controlName);
    }

    public interface IGraphicsWindowPlugin
    {
        event Action KeyDown;

        event Action KeyUp;

        event Action MouseDown;

        event Action MouseMove;

        event Action MouseUp;

        event Action TextInput;

        string BackgroundColor { get; set; }

        string BrushColor { get; set; }

        bool CanResize { get; set; }

        bool FontBold { get; set; }

        bool FontItalic { get; set; }

        string FontName { get; set; }

        decimal FontSize { get; set; }

        decimal Height { get; set; }

        string LastKey { get; }

        string LastText { get; }

        decimal Left { get; set; }

        decimal MouseX { get; }

        decimal MouseY { get; }

        string PenColor { get; set; }

        decimal PenWidth { get; set; }

        string Title { get; set; }

        decimal Top { get; set; }

        decimal Width { get; set; }

        void Clear();

        void DrawBoundText(decimal x, decimal y, decimal width, decimal text);

        void DrawEllipse(decimal x, decimal y, decimal width, decimal height);

        void DrawImage(string imageName, decimal x, decimal y);

        void DrawLine(decimal x1, decimal y1, decimal x2, decimal y2);

        void DrawRectangle(decimal x, decimal y, decimal width, decimal height);

        void DrawResizedImage(string imageName, decimal x, decimal y, decimal width, decimal height);

        void DrawText(decimal x, decimal y, string text);

        void DrawTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3);

        void FillEllipse(decimal x, decimal y, decimal width, decimal height);

        void FillRectangle(decimal x, decimal y, decimal width, decimal height);

        void FillTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3);

        string GetColorFromRGB(decimal red, decimal green, decimal blue);

        string GetPixel(decimal x, decimal y);

        string GetRandomColor();

        void Hide();

        void SetPixel(decimal x, decimal y, string color);

        void Show();

        void ShowMessage(string text, string title);
    }

    public interface IImageListPlugin
    {
        decimal GetHeightOfImage(string imageName);

        decimal GetWidthOfImage(string imageName);

        string LoadImage(string imageUrl);
    }

    public interface IShapesPlugin
    {
        string AddEllipse(decimal width, decimal height);

        string AddImage(string imageName);

        string AddLine(decimal x1, decimal y1, decimal x2, decimal y2);

        string AddRectangle(decimal width, decimal height);

        string AddText(string text);

        string AddTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3);

        void Animate(string shapeName, decimal x, decimal y, decimal duration);

        decimal GetLeft(string shapeName);

        decimal GetOpacity(string shapeName);

        decimal GetTop(string shapeName);

        void HideShape(string shapeName);

        void Move(string shapeName, decimal x, decimal y);

        void Remove(string shapeName);

        void Rotate(string shapeName, decimal angle);

        void SetOpacity(string shapeName, decimal level);

        void SetText(string shapeName, string text);

        void ShowShape(string shapeName);

        void Zoom(string shapeName, decimal scaleX, decimal scaleY);
    }

    public interface IStackPlugin
    {
        decimal GetCount(string stackName);

        string PopValue(string stackName);

        void PushValue(string stackName, string value);
    }

    public interface ITextWindowPlugin
    {
        string BackgroundColor { get; set; }

        string ForegroundColor { get; set; }

        void Clear();

        string Read();

        decimal ReadNumber();

        void Write(string data);

        void WriteLine(string data);
    }

    public interface ITimerPlugin
    {
        event Action Tick;

        decimal Interval { get; set; }

        void Pause();

        void Resume();
    }

    public interface ITurtlePlugin
    {
        decimal Angle { get; set; }

        decimal Speed { get; set; }

        decimal X { get; set; }

        decimal Y { get; set; }

        void Hide();

        void Move(decimal distance);

        void MoveTo(decimal x, decimal y);

        void PenDown();

        void PenUp();

        void Show();

        void Turn(decimal angle);

        void TurnLeft();

        void TurnRight();
    }

    public sealed class PluginsCollection
    {
        private IControlsPlugin controls;
        private IGraphicsWindowPlugin graphicsWindow;
        private IImageListPlugin imageList;
        private IShapesPlugin shapes;
        private IStackPlugin stack;
        private ITextWindowPlugin textWindow;
        private ITimerPlugin timer;
        private ITurtlePlugin turtle;

        public PluginsCollection(
            IControlsPlugin controls,
            IGraphicsWindowPlugin graphicsWindow,
            IImageListPlugin imageList,
            IShapesPlugin shapes,
            IStackPlugin stack,
            ITextWindowPlugin textWindow,
            ITimerPlugin timer,
            ITurtlePlugin turtle)
        {
            this.controls = controls;
            this.graphicsWindow = graphicsWindow;
            this.imageList = imageList;
            this.shapes = shapes;
            this.stack = stack;
            this.textWindow = textWindow;
            this.timer = timer;
            this.turtle = turtle;
        }

        public IControlsPlugin Controls
        {
            get
            {
                if (this.controls.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.controls;
            }
        }

        public IGraphicsWindowPlugin GraphicsWindow
        {
            get
            {
                if (this.graphicsWindow.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.graphicsWindow;
            }
        }

        public IImageListPlugin ImageList
        {
            get
            {
                if (this.imageList.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.imageList;
            }
        }

        public IShapesPlugin Shapes
        {
            get
            {
                if (this.shapes.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.shapes;
            }
        }

        public IStackPlugin Stack
        {
            get
            {
                if (this.stack.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.stack;
            }
        }

        public ITextWindowPlugin TextWindow
        {
            get
            {
                if (this.textWindow.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.textWindow;
            }
        }

        public ITimerPlugin Timer
        {
            get
            {
                if (this.timer.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.timer;
            }
        }

        public ITurtlePlugin Turtle
        {
            get
            {
                if (this.turtle.IsDefault())
                {
                    throw new InvalidOperationException("This plugin was not provided to the engine.");
                }

                return this.turtle;
            }
        }

        internal void SetEventsCallback(SuperBasicEngine engine)
        {
            if (!this.controls.IsDefault())
            {
                this.controls.ButtonClicked += () => engine.RaiseEvent("Controls", "ButtonClicked");
                this.controls.TextTyped += () => engine.RaiseEvent("Controls", "TextTyped");
            }

            if (!this.graphicsWindow.IsDefault())
            {
                this.graphicsWindow.KeyDown += () => engine.RaiseEvent("GraphicsWindow", "KeyDown");
                this.graphicsWindow.KeyUp += () => engine.RaiseEvent("GraphicsWindow", "KeyUp");
                this.graphicsWindow.MouseDown += () => engine.RaiseEvent("GraphicsWindow", "MouseDown");
                this.graphicsWindow.MouseMove += () => engine.RaiseEvent("GraphicsWindow", "MouseMove");
                this.graphicsWindow.MouseUp += () => engine.RaiseEvent("GraphicsWindow", "MouseUp");
                this.graphicsWindow.TextInput += () => engine.RaiseEvent("GraphicsWindow", "TextInput");
            }

            if (!this.timer.IsDefault())
            {
                this.timer.Tick += () => engine.RaiseEvent("Timer", "Tick");
            }
        }
    }
}
