// <copyright file="Libraries.Interfaces.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Compiler.Runtime
{
    using System;

    public interface IArrayLibrary
    {
        bool ContainsIndex(ArrayValue array, string index);

        bool ContainsValue(ArrayValue array, string value);

        ArrayValue GetAllIndices(ArrayValue array);

        decimal GetItemCount(ArrayValue array);

        bool IsArray(BaseValue array);
    }

    public interface IClockLibrary
    {
        string Date { get; }

        decimal Day { get; }

        decimal ElapsedMilliseconds { get; }

        decimal Hour { get; }

        decimal Millisecond { get; }

        decimal Minute { get; }

        decimal Month { get; }

        decimal Second { get; }

        string Time { get; }

        string WeekDay { get; }

        decimal Year { get; }
    }

    public interface IControlsLibrary
    {
        event Action ButtonClicked;

        event Action TextTyped;

        string LastClickedButton { get; }

        string LastTypedTextBox { get; }

        string AddButton(string caption, decimal left, decimal top);

        string AddMultiLineTextBox(decimal left, decimal top);

        string AddTextBox(decimal left, decimal top);

        string GetButtonCaption(string buttonName);

        string GetTextBoxText(string textBoxName);

        void HideControl(string controlName);

        void Move(string control, decimal x, decimal y);

        void Remove(string controlName);

        void SetButtonCaption(string buttonName, string caption);

        void SetSize(string control, decimal width, decimal height);

        void SetTextBoxText(string textBoxName, string text);

        void ShowControl(string controlName);
    }

    public interface IGraphicsWindowLibrary
    {
        event Action KeyDown;

        event Action KeyUp;

        event Action MouseDown;

        event Action MouseMove;

        event Action MouseUp;

        event Action TextInput;

        string BackgroundColor { get; set; }

        string BrushColor { get; set; }

        bool CanResize { get; set; }

        bool FontBold { get; set; }

        bool FontItalic { get; set; }

        string FontName { get; set; }

        decimal FontSize { get; set; }

        decimal Height { get; set; }

        string LastKey { get; }

        string LastText { get; }

        decimal Left { get; set; }

        decimal MouseX { get; }

        decimal MouseY { get; }

        string PenColor { get; set; }

        decimal PenWidth { get; set; }

        string Title { get; set; }

        decimal Top { get; set; }

        decimal Width { get; set; }

        void Clear();

        void DrawBoundText(decimal x, decimal y, decimal width, decimal text);

        void DrawEllipse(decimal x, decimal y, decimal width, decimal height);

        void DrawImage(string imageName, decimal x, decimal y);

        void DrawLine(decimal x1, decimal y1, decimal x2, decimal y2);

        void DrawRectangle(decimal x, decimal y, decimal width, decimal height);

        void DrawResizedImage(string imageName, decimal x, decimal y, decimal width, decimal height);

        void DrawText(decimal x, decimal y, string text);

        void DrawTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3);

        void FillEllipse(decimal x, decimal y, decimal width, decimal height);

        void FillRectangle(decimal x, decimal y, decimal width, decimal height);

        void FillTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3);

        string GetColorFromRGB(decimal red, decimal green, decimal blue);

        string GetPixel(decimal x, decimal y);

        string GetRandomColor();

        void Hide();

        void SetPixel(decimal x, decimal y, string color);

        void Show();

        void ShowMessage(string text, string title);
    }

    public interface IImageListLibrary
    {
        decimal GetHeightOfImage(string imageName);

        decimal GetWidthOfImage(string imageName);

        string LoadImage(string imageUrl);
    }

    public interface IMathLibrary
    {
        decimal Pi { get; }

        decimal Abs(decimal number);

        decimal ArcCos(decimal cosValue);

        decimal ArcSin(decimal sinValue);

        decimal ArcTan(decimal tanValue);

        decimal Ceiling(decimal number);

        decimal Cos(decimal angle);

        decimal Floor(decimal number);

        decimal GetDegrees(decimal angle);

        decimal GetRadians(decimal angle);

        decimal GetRandomNumber(decimal maxNumber);

        decimal Log(decimal number);

        decimal Max(decimal number1, decimal number2);

        decimal Min(decimal number1, decimal number2);

        decimal NaturalLog(decimal number);

        decimal Power(decimal baseNumber, decimal exponent);

        decimal Remainder(decimal dividend, decimal divisor);

        decimal Round(decimal number);

        decimal Sin(decimal angle);

        decimal SquareRoot(decimal number);

        decimal Tan(decimal angle);
    }

    public interface IProgramLibrary
    {
        void Delay(decimal milliSeconds);

        void End();

        void Pause();
    }

    public interface IShapesLibrary
    {
        string AddEllipse(decimal width, decimal height);

        string AddImage(string imageName);

        string AddLine(decimal x1, decimal y1, decimal x2, decimal y2);

        string AddRectangle(decimal width, decimal height);

        string AddText(string text);

        string AddTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3);

        void Animate(string shapeName, decimal x, decimal y, decimal duration);

        decimal GetLeft(string shapeName);

        decimal GetOpacity(string shapeName);

        decimal GetTop(string shapeName);

        void HideShape(string shapeName);

        void Move(string shapeName, decimal x, decimal y);

        void Remove(string shapeName);

        void Rotate(string shapeName, decimal angle);

        void SetOpacity(string shapeName, decimal level);

        void SetText(string shapeName, string text);

        void ShowShape(string shapeName);

        void Zoom(string shapeName, decimal scaleX, decimal scaleY);
    }

    public interface IStackLibrary
    {
        decimal GetCount(string stackName);

        string PopValue(string stackName);

        void PushValue(string stackName, string value);
    }

    public interface ITextLibrary
    {
        string Append(string text1, string text2);

        string ConvertToLowerCase(string text);

        string ConvertToUpperCase(string text);

        bool EndsWith(string text, string subText);

        string GetCharacter(decimal characterCode);

        decimal GetCharacterCode(string character);

        decimal GetIndexOf(string text, string subText);

        decimal GetLength(string text);

        string GetSubText(string text, decimal start, decimal length);

        string GetSubTextToEnd(string text, decimal start);

        bool IsSubText(string text, string subText);

        bool StartsWith(string text, string subText);
    }

    public interface ITextWindowLibrary
    {
        string BackgroundColor { get; set; }

        string ForegroundColor { get; set; }

        void Clear();

        string Read();

        decimal ReadNumber();

        void Write(string data);

        void WriteLine(string data);
    }

    public interface ITimerLibrary
    {
        event Action Tick;

        decimal Interval { get; set; }

        void Pause();

        void Resume();
    }

    public interface ITurtleLibrary
    {
        decimal Angle { get; set; }

        decimal Speed { get; set; }

        decimal X { get; set; }

        decimal Y { get; set; }

        void Hide();

        void Move(decimal distance);

        void MoveTo(decimal x, decimal y);

        void PenDown();

        void PenUp();

        void Show();

        void Turn(decimal angle);

        void TurnLeft();

        void TurnRight();
    }

    public interface IEngineLibraries
    {
        IArrayLibrary Array { get; }

        IClockLibrary Clock { get; }

        IControlsLibrary Controls { get; }

        IGraphicsWindowLibrary GraphicsWindow { get; }

        IImageListLibrary ImageList { get; }

        IMathLibrary Math { get; }

        IProgramLibrary Program { get; }

        IShapesLibrary Shapes { get; }

        IStackLibrary Stack { get; }

        ITextLibrary Text { get; }

        ITextWindowLibrary TextWindow { get; }

        ITimerLibrary Timer { get; }

        ITurtleLibrary Turtle { get; }
    }

    internal static class IEngineLibrariesExtensions
    {
        public static void SetEventCallbacks(this IEngineLibraries libraries, SuperBasicEngine engine)
        {
            libraries.Controls.ButtonClicked += () => engine.RaiseEvent("Controls", "ButtonClicked");
            libraries.Controls.TextTyped += () => engine.RaiseEvent("Controls", "TextTyped");

            libraries.GraphicsWindow.KeyDown += () => engine.RaiseEvent("GraphicsWindow", "KeyDown");
            libraries.GraphicsWindow.KeyUp += () => engine.RaiseEvent("GraphicsWindow", "KeyUp");
            libraries.GraphicsWindow.MouseDown += () => engine.RaiseEvent("GraphicsWindow", "MouseDown");
            libraries.GraphicsWindow.MouseMove += () => engine.RaiseEvent("GraphicsWindow", "MouseMove");
            libraries.GraphicsWindow.MouseUp += () => engine.RaiseEvent("GraphicsWindow", "MouseUp");
            libraries.GraphicsWindow.TextInput += () => engine.RaiseEvent("GraphicsWindow", "TextInput");

            libraries.Timer.Tick += () => engine.RaiseEvent("Timer", "Tick");
        }
    }
}
