// <copyright file="Libraries.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Compiler.Parsing
{
    using SuperBasic.Utilities;

    internal static class LibrariesMetadata
    {
        public static bool LibraryExists(string library)
        {
            switch (library)
            {
                case "Array":
                case "Clock":
                case "Controls":
                case "TextWindow":
                    return true;
            }

            return false;
        }

        public static bool MethodExists(string library, string method)
        {
            switch (library)
            {
                case "Array":
                {
                    switch (method)
                    {
                        case "IsArray":
                            return true;
                    }

                    break;
                }

                case "TextWindow":
                {
                    switch (method)
                    {
                        case "WriteLine":
                            return true;
                    }

                    break;
                }
            }

            return false;
        }

        public static int GetMethodParameterCount(string library, string method)
        {
            switch (library)
            {
                case "Array":
                {
                    switch (method)
                    {
                        case "IsArray": return 1;
                    }

                    break;
                }

                case "TextWindow":
                {
                    switch (method)
                    {
                        case "WriteLine": return 1;
                    }

                    break;
                }
            }

            throw ExceptionUtilities.UnexpectedValue($"{library}.{method}");
        }

        public static bool DoesMethodReturnValue(string library, string method)
        {
            switch (library)
            {
                case "Array":
                {
                    switch (method)
                    {
                        case "IsArray": return true;
                    }

                    break;
                }

                case "TextWindow":
                {
                    switch (method)
                    {
                        case "WriteLine": return false;
                    }

                    break;
                }
            }

            throw ExceptionUtilities.UnexpectedValue($"{library}.{method}");
        }

        public static bool PropertyExists(string library, string property)
        {
            switch (library)
            {
                case "Clock":
                {
                    switch (property)
                    {
                        case "Time":
                            return true;
                    }

                    break;
                }

                case "TextWindow":
                {
                    switch (property)
                    {
                        case "ForegroundColor":
                            return true;
                    }

                    break;
                }
            }

            return false;
        }

        public static bool HasGetter(string library, string property)
        {
            switch (library)
            {
                case "Clock":
                {
                    switch (property)
                    {
                        case "Time":
                            return true;
                    }

                    break;
                }

                case "TextWindow":
                {
                    switch (property)
                    {
                        case "ForegroundColor":
                            return true;
                    }

                    break;
                }
            }

            throw ExceptionUtilities.UnexpectedValue($"{library}.{property}");
        }

        public static bool HasSetter(string library, string property)
        {
            switch (library)
            {
                case "Clock":
                {
                    switch (property)
                    {
                        case "Time":
                            return false;
                    }

                    break;
                }

                case "TextWindow":
                {
                    switch (property)
                    {
                        case "ForegroundColor":
                            return true;
                    }

                    break;
                }
            }

            throw ExceptionUtilities.UnexpectedValue($"{library}.{property}");
        }
    }
}
