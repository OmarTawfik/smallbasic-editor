// <copyright file="Libraries.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Compiler.Binding
{
    using System.Collections.Generic;
    using SuperBasic.Utilities;
    using SuperBasic.Utilities.Resources;

    internal sealed class Library
    {
        public Library(
            string name,
            string description,
            IReadOnlyDictionary<string, Method> methods,
            IReadOnlyDictionary<string, Property> properties,
            IReadOnlyDictionary<string, Event> events)
        {
            this.Name = name;
            this.Description = description;
            this.Methods = methods;
            this.Properties = properties;
            this.Events = events;
        }

        public string Name { get; private set; }

        public string Description { get; private set; }

        public IReadOnlyDictionary<string, Method> Methods { get; private set; }

        public IReadOnlyDictionary<string, Property> Properties { get; private set; }

        public IReadOnlyDictionary<string, Event> Events { get; private set; }
    }

    internal sealed class Parameter
    {
        public Parameter(
            string name,
            string description)
        {
            this.Name = name;
            this.Description = description;
        }

        public string Name { get; private set; }

        public string Description { get; private set; }
    }

    internal sealed class Method
    {
        public Method(
            string name,
            string description,
            bool returnsValue,
            string returnValueDescription,
            IReadOnlyDictionary<string, Parameter> parameters)
        {
            this.Name = name;
            this.Description = description;
            this.ReturnsValue = returnsValue;
            this.ReturnValueDescription = returnValueDescription;
            this.Parameters = parameters;
        }

        public string Name { get; private set; }

        public string Description { get; private set; }

        public bool ReturnsValue { get; private set; }

        public string ReturnValueDescription { get; private set; }

        public IReadOnlyDictionary<string, Parameter> Parameters { get; private set; }
    }

    internal sealed class Property
    {
        public Property(
            string name,
            string description,
            bool hasGetter,
            bool hasSetter)
        {
            this.Name = name;
            this.Description = description;
            this.HasGetter = hasGetter;
            this.HasSetter = hasSetter;
        }

        public string Name { get; private set; }

        public string Description { get; private set; }

        public bool HasGetter { get; private set; }

        public bool HasSetter { get; private set; }
    }

    internal sealed class Event
    {
        public Event(
            string name,
            string description)
        {
            this.Name = name;
            this.Description = description;
        }

        public string Name { get; private set; }

        public string Description { get; private set; }
    }

    internal static class Libraries
    {
        static Libraries()
        {
            var types = new Dictionary<string, Library>();

            // Initialization code for library 'Array'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("ContainsIndex", new Method(
                    "ContainsIndex",
                    LibrariesResources.Array_ContainsIndex,
                    returnsValue: true,
                    LibrariesResources.Array_ContainsIndex_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "array", new Parameter("array", LibrariesResources.Array_ContainsIndex_Parameters_array) },
                        { "index", new Parameter("index", LibrariesResources.Array_ContainsIndex_Parameters_index) },
                    }));

                methods.Add("ContainsValue", new Method(
                    "ContainsValue",
                    LibrariesResources.Array_ContainsValue,
                    returnsValue: true,
                    LibrariesResources.Array_ContainsValue_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "array", new Parameter("array", LibrariesResources.Array_ContainsValue_Parameters_array) },
                        { "value", new Parameter("value", LibrariesResources.Array_ContainsValue_Parameters_value) },
                    }));

                methods.Add("GetAllIndices", new Method(
                    "GetAllIndices",
                    LibrariesResources.Array_GetAllIndices,
                    returnsValue: true,
                    LibrariesResources.Array_GetAllIndices_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "array", new Parameter("array", LibrariesResources.Array_GetAllIndices_Parameters_array) },
                    }));

                methods.Add("GetItemCount", new Method(
                    "GetItemCount",
                    LibrariesResources.Array_GetItemCount,
                    returnsValue: true,
                    LibrariesResources.Array_GetItemCount_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "array", new Parameter("array", LibrariesResources.Array_GetItemCount_Parameters_array) },
                    }));

                methods.Add("IsArray", new Method(
                    "IsArray",
                    LibrariesResources.Array_IsArray,
                    returnsValue: true,
                    LibrariesResources.Array_IsArray_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "array", new Parameter("array", LibrariesResources.Array_IsArray_Parameters_array) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Array", new Library("Array", LibrariesResources.Array, methods, properties, events));
            }

            // Initialization code for library 'Clock'
            {
                var methods = new Dictionary<string, Method>();

                var properties = new Dictionary<string, Property>
                {
                    { "Date", new Property("Date", LibrariesResources.Clock_Date, hasGetter: true, hasSetter: false) },
                    { "Day", new Property("Day", LibrariesResources.Clock_Day, hasGetter: true, hasSetter: false) },
                    { "ElapsedMilliseconds", new Property("ElapsedMilliseconds", LibrariesResources.Clock_ElapsedMilliseconds, hasGetter: true, hasSetter: false) },
                    { "Hour", new Property("Hour", LibrariesResources.Clock_Hour, hasGetter: true, hasSetter: false) },
                    { "Millisecond", new Property("Millisecond", LibrariesResources.Clock_Millisecond, hasGetter: true, hasSetter: false) },
                    { "Minute", new Property("Minute", LibrariesResources.Clock_Minute, hasGetter: true, hasSetter: false) },
                    { "Month", new Property("Month", LibrariesResources.Clock_Month, hasGetter: true, hasSetter: false) },
                    { "Second", new Property("Second", LibrariesResources.Clock_Second, hasGetter: true, hasSetter: false) },
                    { "Time", new Property("Time", LibrariesResources.Clock_Time, hasGetter: true, hasSetter: false) },
                    { "WeekDay", new Property("WeekDay", LibrariesResources.Clock_WeekDay, hasGetter: true, hasSetter: false) },
                    { "Year", new Property("Year", LibrariesResources.Clock_Year, hasGetter: true, hasSetter: false) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("Clock", new Library("Clock", LibrariesResources.Clock, methods, properties, events));
            }

            // Initialization code for library 'Controls'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("AddButton", new Method(
                    "AddButton",
                    LibrariesResources.Controls_AddButton,
                    returnsValue: true,
                    LibrariesResources.Controls_AddButton_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "caption", new Parameter("caption", LibrariesResources.Controls_AddButton_Parameters_caption) },
                        { "left", new Parameter("left", LibrariesResources.Controls_AddButton_Parameters_left) },
                        { "top", new Parameter("top", LibrariesResources.Controls_AddButton_Parameters_top) },
                    }));

                methods.Add("AddMultiLineTextBox", new Method(
                    "AddMultiLineTextBox",
                    LibrariesResources.Controls_AddMultiLineTextBox,
                    returnsValue: true,
                    LibrariesResources.Controls_AddMultiLineTextBox_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "left", new Parameter("left", LibrariesResources.Controls_AddMultiLineTextBox_Parameters_left) },
                        { "top", new Parameter("top", LibrariesResources.Controls_AddMultiLineTextBox_Parameters_top) },
                    }));

                methods.Add("AddTextBox", new Method(
                    "AddTextBox",
                    LibrariesResources.Controls_AddTextBox,
                    returnsValue: true,
                    LibrariesResources.Controls_AddTextBox_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "left", new Parameter("left", LibrariesResources.Controls_AddTextBox_Parameters_left) },
                        { "top", new Parameter("top", LibrariesResources.Controls_AddTextBox_Parameters_top) },
                    }));

                methods.Add("GetButtonCaption", new Method(
                    "GetButtonCaption",
                    LibrariesResources.Controls_GetButtonCaption,
                    returnsValue: true,
                    LibrariesResources.Controls_GetButtonCaption_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "buttonName", new Parameter("buttonName", LibrariesResources.Controls_GetButtonCaption_Parameters_buttonName) },
                    }));

                methods.Add("GetTextBoxText", new Method(
                    "GetTextBoxText",
                    LibrariesResources.Controls_GetTextBoxText,
                    returnsValue: true,
                    LibrariesResources.Controls_GetTextBoxText_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "textBoxName", new Parameter("textBoxName", LibrariesResources.Controls_GetTextBoxText_Parameters_textBoxName) },
                    }));

                methods.Add("HideControl", new Method(
                    "HideControl",
                    LibrariesResources.Controls_HideControl,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "controlName", new Parameter("controlName", LibrariesResources.Controls_HideControl_Parameters_controlName) },
                    }));

                methods.Add("Move", new Method(
                    "Move",
                    LibrariesResources.Controls_Move,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "control", new Parameter("control", LibrariesResources.Controls_Move_Parameters_control) },
                        { "x", new Parameter("x", LibrariesResources.Controls_Move_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.Controls_Move_Parameters_y) },
                    }));

                methods.Add("Remove", new Method(
                    "Remove",
                    LibrariesResources.Controls_Remove,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "controlName", new Parameter("controlName", LibrariesResources.Controls_Remove_Parameters_controlName) },
                    }));

                methods.Add("SetButtonCaption", new Method(
                    "SetButtonCaption",
                    LibrariesResources.Controls_SetButtonCaption,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "buttonName", new Parameter("buttonName", LibrariesResources.Controls_SetButtonCaption_Parameters_buttonName) },
                        { "caption", new Parameter("caption", LibrariesResources.Controls_SetButtonCaption_Parameters_caption) },
                    }));

                methods.Add("SetSize", new Method(
                    "SetSize",
                    LibrariesResources.Controls_SetSize,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "control", new Parameter("control", LibrariesResources.Controls_SetSize_Parameters_control) },
                        { "width", new Parameter("width", LibrariesResources.Controls_SetSize_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.Controls_SetSize_Parameters_height) },
                    }));

                methods.Add("SetTextBoxText", new Method(
                    "SetTextBoxText",
                    LibrariesResources.Controls_SetTextBoxText,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "textBoxName", new Parameter("textBoxName", LibrariesResources.Controls_SetTextBoxText_Parameters_textBoxName) },
                        { "text", new Parameter("text", LibrariesResources.Controls_SetTextBoxText_Parameters_text) },
                    }));

                methods.Add("ShowControl", new Method(
                    "ShowControl",
                    LibrariesResources.Controls_ShowControl,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "controlName", new Parameter("controlName", LibrariesResources.Controls_ShowControl_Parameters_controlName) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "LastClickedButton", new Property("LastClickedButton", LibrariesResources.Controls_LastClickedButton, hasGetter: true, hasSetter: false) },
                    { "LastTypedTextBox", new Property("LastTypedTextBox", LibrariesResources.Controls_LastTypedTextBox, hasGetter: true, hasSetter: false) },
                };

                var events = new Dictionary<string, Event>
                {
                    { "ButtonClicked", new Event("ButtonClicked", LibrariesResources.Controls_ButtonClicked) },
                    { "TextTyped", new Event("TextTyped", LibrariesResources.Controls_TextTyped) },
                };

                types.Add("Controls", new Library("Controls", LibrariesResources.Controls, methods, properties, events));
            }

            // Initialization code for library 'Desktop'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("SetWallPaper", new Method(
                    "SetWallPaper",
                    LibrariesResources.Desktop_SetWallPaper,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "fileOrUrl", new Parameter("fileOrUrl", LibrariesResources.Desktop_SetWallPaper_Parameters_fileOrUrl) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "Height", new Property("Height", LibrariesResources.Desktop_Height, hasGetter: true, hasSetter: false) },
                    { "Width", new Property("Width", LibrariesResources.Desktop_Width, hasGetter: true, hasSetter: false) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("Desktop", new Library("Desktop", LibrariesResources.Desktop, methods, properties, events));
            }

            // Initialization code for library 'Dictionary'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("GetDefinition", new Method(
                    "GetDefinition",
                    LibrariesResources.Dictionary_GetDefinition,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinition_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinition_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToEnglish", new Method(
                    "GetDefinitionEnglishToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToFrench", new Method(
                    "GetDefinitionEnglishToFrench",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToFrench,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToFrench_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToFrench_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToGerman", new Method(
                    "GetDefinitionEnglishToGerman",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToGerman,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToGerman_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToGerman_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToItalian", new Method(
                    "GetDefinitionEnglishToItalian",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToItalian,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToItalian_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToItalian_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToJapanese", new Method(
                    "GetDefinitionEnglishToJapanese",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToJapanese,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToJapanese_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToJapanese_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToKorean", new Method(
                    "GetDefinitionEnglishToKorean",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToKorean,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToKorean_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToKorean_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToSimplifiedChinese", new Method(
                    "GetDefinitionEnglishToSimplifiedChinese",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToSimplifiedChinese,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToSimplifiedChinese_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToSimplifiedChinese_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToSpanish", new Method(
                    "GetDefinitionEnglishToSpanish",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToSpanish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToSpanish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToSpanish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionEnglishToTraditionalChinese", new Method(
                    "GetDefinitionEnglishToTraditionalChinese",
                    LibrariesResources.Dictionary_GetDefinitionEnglishToTraditionalChinese,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionEnglishToTraditionalChinese_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionEnglishToTraditionalChinese_Parameters_word) },
                    }));

                methods.Add("GetDefinitionFrenchToEnglish", new Method(
                    "GetDefinitionFrenchToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionFrenchToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionFrenchToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionFrenchToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionGermanToEnglish", new Method(
                    "GetDefinitionGermanToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionGermanToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionGermanToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionGermanToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionItalianToEnglish", new Method(
                    "GetDefinitionItalianToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionItalianToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionItalianToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionItalianToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionJapaneseToEnglish", new Method(
                    "GetDefinitionJapaneseToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionJapaneseToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionJapaneseToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionJapaneseToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionKoreanToEnglish", new Method(
                    "GetDefinitionKoreanToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionKoreanToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionKoreanToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionKoreanToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionSimplifiedChineseToEnglish", new Method(
                    "GetDefinitionSimplifiedChineseToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionSimplifiedChineseToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionSimplifiedChineseToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionSimplifiedChineseToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionSpanishToEnglish", new Method(
                    "GetDefinitionSpanishToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionSpanishToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionSpanishToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionSpanishToEnglish_Parameters_word) },
                    }));

                methods.Add("GetDefinitionTraditionalChineseToEnglish", new Method(
                    "GetDefinitionTraditionalChineseToEnglish",
                    LibrariesResources.Dictionary_GetDefinitionTraditionalChineseToEnglish,
                    returnsValue: true,
                    LibrariesResources.Dictionary_GetDefinitionTraditionalChineseToEnglish_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "word", new Parameter("word", LibrariesResources.Dictionary_GetDefinitionTraditionalChineseToEnglish_Parameters_word) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Dictionary", new Library("Dictionary", LibrariesResources.Dictionary, methods, properties, events));
            }

            // Initialization code for library 'File'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("AppendContents", new Method(
                    "AppendContents",
                    LibrariesResources.File_AppendContents,
                    returnsValue: true,
                    LibrariesResources.File_AppendContents_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_AppendContents_Parameters_filePath) },
                        { "contents", new Parameter("contents", LibrariesResources.File_AppendContents_Parameters_contents) },
                    }));

                methods.Add("CopyFile", new Method(
                    "CopyFile",
                    LibrariesResources.File_CopyFile,
                    returnsValue: true,
                    LibrariesResources.File_CopyFile_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "sourceFilePath", new Parameter("sourceFilePath", LibrariesResources.File_CopyFile_Parameters_sourceFilePath) },
                        { "destinationFilePath", new Parameter("destinationFilePath", LibrariesResources.File_CopyFile_Parameters_destinationFilePath) },
                    }));

                methods.Add("CreateDirectory", new Method(
                    "CreateDirectory",
                    LibrariesResources.File_CreateDirectory,
                    returnsValue: true,
                    LibrariesResources.File_CreateDirectory_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "directoryPath", new Parameter("directoryPath", LibrariesResources.File_CreateDirectory_Parameters_directoryPath) },
                    }));

                methods.Add("DeleteDirectory", new Method(
                    "DeleteDirectory",
                    LibrariesResources.File_DeleteDirectory,
                    returnsValue: true,
                    LibrariesResources.File_DeleteDirectory_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "directoryPath", new Parameter("directoryPath", LibrariesResources.File_DeleteDirectory_Parameters_directoryPath) },
                    }));

                methods.Add("DeleteFile", new Method(
                    "DeleteFile",
                    LibrariesResources.File_DeleteFile,
                    returnsValue: true,
                    LibrariesResources.File_DeleteFile_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_DeleteFile_Parameters_filePath) },
                    }));

                methods.Add("GetDirectories", new Method(
                    "GetDirectories",
                    LibrariesResources.File_GetDirectories,
                    returnsValue: true,
                    LibrariesResources.File_GetDirectories_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "directoryPath", new Parameter("directoryPath", LibrariesResources.File_GetDirectories_Parameters_directoryPath) },
                    }));

                methods.Add("GetFiles", new Method(
                    "GetFiles",
                    LibrariesResources.File_GetFiles,
                    returnsValue: true,
                    LibrariesResources.File_GetFiles_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "directoryPath", new Parameter("directoryPath", LibrariesResources.File_GetFiles_Parameters_directoryPath) },
                    }));

                methods.Add("GetSettingsFilePath", new Method(
                    "GetSettingsFilePath",
                    LibrariesResources.File_GetSettingsFilePath,
                    returnsValue: true,
                    LibrariesResources.File_GetSettingsFilePath_ReturnValue,
                    new Dictionary<string, Parameter>()));

                methods.Add("GetTemporaryFilePath", new Method(
                    "GetTemporaryFilePath",
                    LibrariesResources.File_GetTemporaryFilePath,
                    returnsValue: true,
                    LibrariesResources.File_GetTemporaryFilePath_ReturnValue,
                    new Dictionary<string, Parameter>()));

                methods.Add("InsertLine", new Method(
                    "InsertLine",
                    LibrariesResources.File_InsertLine,
                    returnsValue: true,
                    LibrariesResources.File_InsertLine_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_InsertLine_Parameters_filePath) },
                        { "lineNumber", new Parameter("lineNumber", LibrariesResources.File_InsertLine_Parameters_lineNumber) },
                        { "contents", new Parameter("contents", LibrariesResources.File_InsertLine_Parameters_contents) },
                    }));

                methods.Add("ReadContents", new Method(
                    "ReadContents",
                    LibrariesResources.File_ReadContents,
                    returnsValue: true,
                    LibrariesResources.File_ReadContents_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_ReadContents_Parameters_filePath) },
                    }));

                methods.Add("ReadLine", new Method(
                    "ReadLine",
                    LibrariesResources.File_ReadLine,
                    returnsValue: true,
                    LibrariesResources.File_ReadLine_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_ReadLine_Parameters_filePath) },
                        { "lineNumber", new Parameter("lineNumber", LibrariesResources.File_ReadLine_Parameters_lineNumber) },
                    }));

                methods.Add("WriteContents", new Method(
                    "WriteContents",
                    LibrariesResources.File_WriteContents,
                    returnsValue: true,
                    LibrariesResources.File_WriteContents_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_WriteContents_Parameters_filePath) },
                        { "contents", new Parameter("contents", LibrariesResources.File_WriteContents_Parameters_contents) },
                    }));

                methods.Add("WriteLine", new Method(
                    "WriteLine",
                    LibrariesResources.File_WriteLine,
                    returnsValue: true,
                    LibrariesResources.File_WriteLine_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.File_WriteLine_Parameters_filePath) },
                        { "lineNumber", new Parameter("lineNumber", LibrariesResources.File_WriteLine_Parameters_lineNumber) },
                        { "contents", new Parameter("contents", LibrariesResources.File_WriteLine_Parameters_contents) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "LastError", new Property("LastError", LibrariesResources.File_LastError, hasGetter: true, hasSetter: true) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("File", new Library("File", LibrariesResources.File, methods, properties, events));
            }

            // Initialization code for library 'Flickr'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("GetPictureOfMoment", new Method(
                    "GetPictureOfMoment",
                    LibrariesResources.Flickr_GetPictureOfMoment,
                    returnsValue: true,
                    LibrariesResources.Flickr_GetPictureOfMoment_ReturnValue,
                    new Dictionary<string, Parameter>()));

                methods.Add("GetRandomPicture", new Method(
                    "GetRandomPicture",
                    LibrariesResources.Flickr_GetRandomPicture,
                    returnsValue: true,
                    LibrariesResources.Flickr_GetRandomPicture_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "tag", new Parameter("tag", LibrariesResources.Flickr_GetRandomPicture_Parameters_tag) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Flickr", new Library("Flickr", LibrariesResources.Flickr, methods, properties, events));
            }

            // Initialization code for library 'GraphicsWindow'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Clear", new Method(
                    "Clear",
                    LibrariesResources.GraphicsWindow_Clear,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("DrawBoundText", new Method(
                    "DrawBoundText",
                    LibrariesResources.GraphicsWindow_DrawBoundText,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_DrawBoundText_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_DrawBoundText_Parameters_y) },
                        { "width", new Parameter("width", LibrariesResources.GraphicsWindow_DrawBoundText_Parameters_width) },
                        { "text", new Parameter("text", LibrariesResources.GraphicsWindow_DrawBoundText_Parameters_text) },
                    }));

                methods.Add("DrawEllipse", new Method(
                    "DrawEllipse",
                    LibrariesResources.GraphicsWindow_DrawEllipse,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_DrawEllipse_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_DrawEllipse_Parameters_y) },
                        { "width", new Parameter("width", LibrariesResources.GraphicsWindow_DrawEllipse_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.GraphicsWindow_DrawEllipse_Parameters_height) },
                    }));

                methods.Add("DrawImage", new Method(
                    "DrawImage",
                    LibrariesResources.GraphicsWindow_DrawImage,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "imageName", new Parameter("imageName", LibrariesResources.GraphicsWindow_DrawImage_Parameters_imageName) },
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_DrawImage_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_DrawImage_Parameters_y) },
                    }));

                methods.Add("DrawLine", new Method(
                    "DrawLine",
                    LibrariesResources.GraphicsWindow_DrawLine,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x1", new Parameter("x1", LibrariesResources.GraphicsWindow_DrawLine_Parameters_x1) },
                        { "y1", new Parameter("y1", LibrariesResources.GraphicsWindow_DrawLine_Parameters_y1) },
                        { "x2", new Parameter("x2", LibrariesResources.GraphicsWindow_DrawLine_Parameters_x2) },
                        { "y2", new Parameter("y2", LibrariesResources.GraphicsWindow_DrawLine_Parameters_y2) },
                    }));

                methods.Add("DrawRectangle", new Method(
                    "DrawRectangle",
                    LibrariesResources.GraphicsWindow_DrawRectangle,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_DrawRectangle_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_DrawRectangle_Parameters_y) },
                        { "width", new Parameter("width", LibrariesResources.GraphicsWindow_DrawRectangle_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.GraphicsWindow_DrawRectangle_Parameters_height) },
                    }));

                methods.Add("DrawResizedImage", new Method(
                    "DrawResizedImage",
                    LibrariesResources.GraphicsWindow_DrawResizedImage,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "imageName", new Parameter("imageName", LibrariesResources.GraphicsWindow_DrawResizedImage_Parameters_imageName) },
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_DrawResizedImage_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_DrawResizedImage_Parameters_y) },
                        { "width", new Parameter("width", LibrariesResources.GraphicsWindow_DrawResizedImage_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.GraphicsWindow_DrawResizedImage_Parameters_height) },
                    }));

                methods.Add("DrawText", new Method(
                    "DrawText",
                    LibrariesResources.GraphicsWindow_DrawText,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_DrawText_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_DrawText_Parameters_y) },
                        { "text", new Parameter("text", LibrariesResources.GraphicsWindow_DrawText_Parameters_text) },
                    }));

                methods.Add("DrawTriangle", new Method(
                    "DrawTriangle",
                    LibrariesResources.GraphicsWindow_DrawTriangle,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x1", new Parameter("x1", LibrariesResources.GraphicsWindow_DrawTriangle_Parameters_x1) },
                        { "y1", new Parameter("y1", LibrariesResources.GraphicsWindow_DrawTriangle_Parameters_y1) },
                        { "x2", new Parameter("x2", LibrariesResources.GraphicsWindow_DrawTriangle_Parameters_x2) },
                        { "y2", new Parameter("y2", LibrariesResources.GraphicsWindow_DrawTriangle_Parameters_y2) },
                        { "x3", new Parameter("x3", LibrariesResources.GraphicsWindow_DrawTriangle_Parameters_x3) },
                        { "y3", new Parameter("y3", LibrariesResources.GraphicsWindow_DrawTriangle_Parameters_y3) },
                    }));

                methods.Add("FillEllipse", new Method(
                    "FillEllipse",
                    LibrariesResources.GraphicsWindow_FillEllipse,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_FillEllipse_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_FillEllipse_Parameters_y) },
                        { "width", new Parameter("width", LibrariesResources.GraphicsWindow_FillEllipse_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.GraphicsWindow_FillEllipse_Parameters_height) },
                    }));

                methods.Add("FillRectangle", new Method(
                    "FillRectangle",
                    LibrariesResources.GraphicsWindow_FillRectangle,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_FillRectangle_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_FillRectangle_Parameters_y) },
                        { "width", new Parameter("width", LibrariesResources.GraphicsWindow_FillRectangle_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.GraphicsWindow_FillRectangle_Parameters_height) },
                    }));

                methods.Add("FillTriangle", new Method(
                    "FillTriangle",
                    LibrariesResources.GraphicsWindow_FillTriangle,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x1", new Parameter("x1", LibrariesResources.GraphicsWindow_FillTriangle_Parameters_x1) },
                        { "y1", new Parameter("y1", LibrariesResources.GraphicsWindow_FillTriangle_Parameters_y1) },
                        { "x2", new Parameter("x2", LibrariesResources.GraphicsWindow_FillTriangle_Parameters_x2) },
                        { "y2", new Parameter("y2", LibrariesResources.GraphicsWindow_FillTriangle_Parameters_y2) },
                        { "x3", new Parameter("x3", LibrariesResources.GraphicsWindow_FillTriangle_Parameters_x3) },
                        { "y3", new Parameter("y3", LibrariesResources.GraphicsWindow_FillTriangle_Parameters_y3) },
                    }));

                methods.Add("GetColorFromRGB", new Method(
                    "GetColorFromRGB",
                    LibrariesResources.GraphicsWindow_GetColorFromRGB,
                    returnsValue: true,
                    LibrariesResources.GraphicsWindow_GetColorFromRGB_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "red", new Parameter("red", LibrariesResources.GraphicsWindow_GetColorFromRGB_Parameters_red) },
                        { "green", new Parameter("green", LibrariesResources.GraphicsWindow_GetColorFromRGB_Parameters_green) },
                        { "blue", new Parameter("blue", LibrariesResources.GraphicsWindow_GetColorFromRGB_Parameters_blue) },
                    }));

                methods.Add("GetPixel", new Method(
                    "GetPixel",
                    LibrariesResources.GraphicsWindow_GetPixel,
                    returnsValue: true,
                    LibrariesResources.GraphicsWindow_GetPixel_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_GetPixel_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_GetPixel_Parameters_y) },
                    }));

                methods.Add("GetRandomColor", new Method(
                    "GetRandomColor",
                    LibrariesResources.GraphicsWindow_GetRandomColor,
                    returnsValue: true,
                    LibrariesResources.GraphicsWindow_GetRandomColor_ReturnValue,
                    new Dictionary<string, Parameter>()));

                methods.Add("Hide", new Method(
                    "Hide",
                    LibrariesResources.GraphicsWindow_Hide,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("SetPixel", new Method(
                    "SetPixel",
                    LibrariesResources.GraphicsWindow_SetPixel,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.GraphicsWindow_SetPixel_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.GraphicsWindow_SetPixel_Parameters_y) },
                        { "color", new Parameter("color", LibrariesResources.GraphicsWindow_SetPixel_Parameters_color) },
                    }));

                methods.Add("Show", new Method(
                    "Show",
                    LibrariesResources.GraphicsWindow_Show,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("ShowMessage", new Method(
                    "ShowMessage",
                    LibrariesResources.GraphicsWindow_ShowMessage,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.GraphicsWindow_ShowMessage_Parameters_text) },
                        { "title", new Parameter("title", LibrariesResources.GraphicsWindow_ShowMessage_Parameters_title) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "BackgroundColor", new Property("BackgroundColor", LibrariesResources.GraphicsWindow_BackgroundColor, hasGetter: true, hasSetter: true) },
                    { "BrushColor", new Property("BrushColor", LibrariesResources.GraphicsWindow_BrushColor, hasGetter: true, hasSetter: true) },
                    { "CanResize", new Property("CanResize", LibrariesResources.GraphicsWindow_CanResize, hasGetter: true, hasSetter: true) },
                    { "FontBold", new Property("FontBold", LibrariesResources.GraphicsWindow_FontBold, hasGetter: true, hasSetter: true) },
                    { "FontItalic", new Property("FontItalic", LibrariesResources.GraphicsWindow_FontItalic, hasGetter: true, hasSetter: true) },
                    { "FontName", new Property("FontName", LibrariesResources.GraphicsWindow_FontName, hasGetter: true, hasSetter: true) },
                    { "FontSize", new Property("FontSize", LibrariesResources.GraphicsWindow_FontSize, hasGetter: true, hasSetter: true) },
                    { "Height", new Property("Height", LibrariesResources.GraphicsWindow_Height, hasGetter: true, hasSetter: true) },
                    { "LastKey", new Property("LastKey", LibrariesResources.GraphicsWindow_LastKey, hasGetter: true, hasSetter: false) },
                    { "LastText", new Property("LastText", LibrariesResources.GraphicsWindow_LastText, hasGetter: true, hasSetter: false) },
                    { "Left", new Property("Left", LibrariesResources.GraphicsWindow_Left, hasGetter: true, hasSetter: true) },
                    { "MouseX", new Property("MouseX", LibrariesResources.GraphicsWindow_MouseX, hasGetter: true, hasSetter: false) },
                    { "MouseY", new Property("MouseY", LibrariesResources.GraphicsWindow_MouseY, hasGetter: true, hasSetter: false) },
                    { "PenColor", new Property("PenColor", LibrariesResources.GraphicsWindow_PenColor, hasGetter: true, hasSetter: true) },
                    { "PenWidth", new Property("PenWidth", LibrariesResources.GraphicsWindow_PenWidth, hasGetter: true, hasSetter: true) },
                    { "Title", new Property("Title", LibrariesResources.GraphicsWindow_Title, hasGetter: true, hasSetter: true) },
                    { "Top", new Property("Top", LibrariesResources.GraphicsWindow_Top, hasGetter: true, hasSetter: true) },
                    { "Width", new Property("Width", LibrariesResources.GraphicsWindow_Width, hasGetter: true, hasSetter: true) },
                };

                var events = new Dictionary<string, Event>
                {
                    { "KeyDown", new Event("KeyDown", LibrariesResources.GraphicsWindow_KeyDown) },
                    { "KeyUp", new Event("KeyUp", LibrariesResources.GraphicsWindow_KeyUp) },
                    { "MouseDown", new Event("MouseDown", LibrariesResources.GraphicsWindow_MouseDown) },
                    { "MouseMove", new Event("MouseMove", LibrariesResources.GraphicsWindow_MouseMove) },
                    { "MouseUp", new Event("MouseUp", LibrariesResources.GraphicsWindow_MouseUp) },
                    { "TextInput", new Event("TextInput", LibrariesResources.GraphicsWindow_TextInput) },
                };

                types.Add("GraphicsWindow", new Library("GraphicsWindow", LibrariesResources.GraphicsWindow, methods, properties, events));
            }

            // Initialization code for library 'ImageList'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("GetHeightOfImage", new Method(
                    "GetHeightOfImage",
                    LibrariesResources.ImageList_GetHeightOfImage,
                    returnsValue: true,
                    LibrariesResources.ImageList_GetHeightOfImage_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "imageName", new Parameter("imageName", LibrariesResources.ImageList_GetHeightOfImage_Parameters_imageName) },
                    }));

                methods.Add("GetWidthOfImage", new Method(
                    "GetWidthOfImage",
                    LibrariesResources.ImageList_GetWidthOfImage,
                    returnsValue: true,
                    LibrariesResources.ImageList_GetWidthOfImage_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "imageName", new Parameter("imageName", LibrariesResources.ImageList_GetWidthOfImage_Parameters_imageName) },
                    }));

                methods.Add("LoadImage", new Method(
                    "LoadImage",
                    LibrariesResources.ImageList_LoadImage,
                    returnsValue: true,
                    LibrariesResources.ImageList_LoadImage_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "fileNameOrUrl", new Parameter("fileNameOrUrl", LibrariesResources.ImageList_LoadImage_Parameters_fileNameOrUrl) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("ImageList", new Library("ImageList", LibrariesResources.ImageList, methods, properties, events));
            }

            // Initialization code for library 'Math'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Abs", new Method(
                    "Abs",
                    LibrariesResources.Math_Abs,
                    returnsValue: true,
                    LibrariesResources.Math_Abs_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_Abs_Parameters_number) },
                    }));

                methods.Add("ArcCos", new Method(
                    "ArcCos",
                    LibrariesResources.Math_ArcCos,
                    returnsValue: true,
                    LibrariesResources.Math_ArcCos_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "cosValue", new Parameter("cosValue", LibrariesResources.Math_ArcCos_Parameters_cosValue) },
                    }));

                methods.Add("ArcSin", new Method(
                    "ArcSin",
                    LibrariesResources.Math_ArcSin,
                    returnsValue: true,
                    LibrariesResources.Math_ArcSin_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "sinValue", new Parameter("sinValue", LibrariesResources.Math_ArcSin_Parameters_sinValue) },
                    }));

                methods.Add("ArcTan", new Method(
                    "ArcTan",
                    LibrariesResources.Math_ArcTan,
                    returnsValue: true,
                    LibrariesResources.Math_ArcTan_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "tanValue", new Parameter("tanValue", LibrariesResources.Math_ArcTan_Parameters_tanValue) },
                    }));

                methods.Add("Ceiling", new Method(
                    "Ceiling",
                    LibrariesResources.Math_Ceiling,
                    returnsValue: true,
                    LibrariesResources.Math_Ceiling_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_Ceiling_Parameters_number) },
                    }));

                methods.Add("Cos", new Method(
                    "Cos",
                    LibrariesResources.Math_Cos,
                    returnsValue: true,
                    LibrariesResources.Math_Cos_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "angle", new Parameter("angle", LibrariesResources.Math_Cos_Parameters_angle) },
                    }));

                methods.Add("Floor", new Method(
                    "Floor",
                    LibrariesResources.Math_Floor,
                    returnsValue: true,
                    LibrariesResources.Math_Floor_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_Floor_Parameters_number) },
                    }));

                methods.Add("GetDegrees", new Method(
                    "GetDegrees",
                    LibrariesResources.Math_GetDegrees,
                    returnsValue: true,
                    LibrariesResources.Math_GetDegrees_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "angle", new Parameter("angle", LibrariesResources.Math_GetDegrees_Parameters_angle) },
                    }));

                methods.Add("GetRadians", new Method(
                    "GetRadians",
                    LibrariesResources.Math_GetRadians,
                    returnsValue: true,
                    LibrariesResources.Math_GetRadians_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "angle", new Parameter("angle", LibrariesResources.Math_GetRadians_Parameters_angle) },
                    }));

                methods.Add("GetRandomNumber", new Method(
                    "GetRandomNumber",
                    LibrariesResources.Math_GetRandomNumber,
                    returnsValue: true,
                    LibrariesResources.Math_GetRandomNumber_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "maxNumber", new Parameter("maxNumber", LibrariesResources.Math_GetRandomNumber_Parameters_maxNumber) },
                    }));

                methods.Add("Log", new Method(
                    "Log",
                    LibrariesResources.Math_Log,
                    returnsValue: true,
                    LibrariesResources.Math_Log_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_Log_Parameters_number) },
                    }));

                methods.Add("Max", new Method(
                    "Max",
                    LibrariesResources.Math_Max,
                    returnsValue: true,
                    LibrariesResources.Math_Max_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number1", new Parameter("number1", LibrariesResources.Math_Max_Parameters_number1) },
                        { "number2", new Parameter("number2", LibrariesResources.Math_Max_Parameters_number2) },
                    }));

                methods.Add("Min", new Method(
                    "Min",
                    LibrariesResources.Math_Min,
                    returnsValue: true,
                    LibrariesResources.Math_Min_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number1", new Parameter("number1", LibrariesResources.Math_Min_Parameters_number1) },
                        { "number2", new Parameter("number2", LibrariesResources.Math_Min_Parameters_number2) },
                    }));

                methods.Add("NaturalLog", new Method(
                    "NaturalLog",
                    LibrariesResources.Math_NaturalLog,
                    returnsValue: true,
                    LibrariesResources.Math_NaturalLog_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_NaturalLog_Parameters_number) },
                    }));

                methods.Add("Power", new Method(
                    "Power",
                    LibrariesResources.Math_Power,
                    returnsValue: true,
                    LibrariesResources.Math_Power_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "baseNumber", new Parameter("baseNumber", LibrariesResources.Math_Power_Parameters_baseNumber) },
                        { "exponent", new Parameter("exponent", LibrariesResources.Math_Power_Parameters_exponent) },
                    }));

                methods.Add("Remainder", new Method(
                    "Remainder",
                    LibrariesResources.Math_Remainder,
                    returnsValue: true,
                    LibrariesResources.Math_Remainder_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "dividend", new Parameter("dividend", LibrariesResources.Math_Remainder_Parameters_dividend) },
                        { "divisor", new Parameter("divisor", LibrariesResources.Math_Remainder_Parameters_divisor) },
                    }));

                methods.Add("Round", new Method(
                    "Round",
                    LibrariesResources.Math_Round,
                    returnsValue: true,
                    LibrariesResources.Math_Round_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_Round_Parameters_number) },
                    }));

                methods.Add("Sin", new Method(
                    "Sin",
                    LibrariesResources.Math_Sin,
                    returnsValue: true,
                    LibrariesResources.Math_Sin_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "angle", new Parameter("angle", LibrariesResources.Math_Sin_Parameters_angle) },
                    }));

                methods.Add("SquareRoot", new Method(
                    "SquareRoot",
                    LibrariesResources.Math_SquareRoot,
                    returnsValue: true,
                    LibrariesResources.Math_SquareRoot_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "number", new Parameter("number", LibrariesResources.Math_SquareRoot_Parameters_number) },
                    }));

                methods.Add("Tan", new Method(
                    "Tan",
                    LibrariesResources.Math_Tan,
                    returnsValue: true,
                    LibrariesResources.Math_Tan_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "angle", new Parameter("angle", LibrariesResources.Math_Tan_Parameters_angle) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "Pi", new Property("Pi", LibrariesResources.Math_Pi, hasGetter: true, hasSetter: false) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("Math", new Library("Math", LibrariesResources.Math, methods, properties, events));
            }

            // Initialization code for library 'Mouse'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("HideCursor", new Method(
                    "HideCursor",
                    LibrariesResources.Mouse_HideCursor,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("ShowCursor", new Method(
                    "ShowCursor",
                    LibrariesResources.Mouse_ShowCursor,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                var properties = new Dictionary<string, Property>
                {
                    { "IsLeftButtonDown", new Property("IsLeftButtonDown", LibrariesResources.Mouse_IsLeftButtonDown, hasGetter: true, hasSetter: false) },
                    { "IsRightButtonDown", new Property("IsRightButtonDown", LibrariesResources.Mouse_IsRightButtonDown, hasGetter: true, hasSetter: false) },
                    { "MouseX", new Property("MouseX", LibrariesResources.Mouse_MouseX, hasGetter: true, hasSetter: true) },
                    { "MouseY", new Property("MouseY", LibrariesResources.Mouse_MouseY, hasGetter: true, hasSetter: true) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("Mouse", new Library("Mouse", LibrariesResources.Mouse, methods, properties, events));
            }

            // Initialization code for library 'Network'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("DownloadFile", new Method(
                    "DownloadFile",
                    LibrariesResources.Network_DownloadFile,
                    returnsValue: true,
                    LibrariesResources.Network_DownloadFile_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "url", new Parameter("url", LibrariesResources.Network_DownloadFile_Parameters_url) },
                    }));

                methods.Add("GetWebPageContents", new Method(
                    "GetWebPageContents",
                    LibrariesResources.Network_GetWebPageContents,
                    returnsValue: true,
                    LibrariesResources.Network_GetWebPageContents_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "url", new Parameter("url", LibrariesResources.Network_GetWebPageContents_Parameters_url) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Network", new Library("Network", LibrariesResources.Network, methods, properties, events));
            }

            // Initialization code for library 'Program'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Delay", new Method(
                    "Delay",
                    LibrariesResources.Program_Delay,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "milliSeconds", new Parameter("milliSeconds", LibrariesResources.Program_Delay_Parameters_milliSeconds) },
                    }));

                methods.Add("End", new Method(
                    "End",
                    LibrariesResources.Program_End,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("GetArgument", new Method(
                    "GetArgument",
                    LibrariesResources.Program_GetArgument,
                    returnsValue: true,
                    LibrariesResources.Program_GetArgument_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "index", new Parameter("index", LibrariesResources.Program_GetArgument_Parameters_index) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "ArgumentCount", new Property("ArgumentCount", LibrariesResources.Program_ArgumentCount, hasGetter: true, hasSetter: false) },
                    { "Directory", new Property("Directory", LibrariesResources.Program_Directory, hasGetter: true, hasSetter: false) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("Program", new Library("Program", LibrariesResources.Program, methods, properties, events));
            }

            // Initialization code for library 'Shapes'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("AddEllipse", new Method(
                    "AddEllipse",
                    LibrariesResources.Shapes_AddEllipse,
                    returnsValue: true,
                    LibrariesResources.Shapes_AddEllipse_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "width", new Parameter("width", LibrariesResources.Shapes_AddEllipse_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.Shapes_AddEllipse_Parameters_height) },
                    }));

                methods.Add("AddImage", new Method(
                    "AddImage",
                    LibrariesResources.Shapes_AddImage,
                    returnsValue: true,
                    LibrariesResources.Shapes_AddImage_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "imageName", new Parameter("imageName", LibrariesResources.Shapes_AddImage_Parameters_imageName) },
                    }));

                methods.Add("AddLine", new Method(
                    "AddLine",
                    LibrariesResources.Shapes_AddLine,
                    returnsValue: true,
                    LibrariesResources.Shapes_AddLine_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "x1", new Parameter("x1", LibrariesResources.Shapes_AddLine_Parameters_x1) },
                        { "y1", new Parameter("y1", LibrariesResources.Shapes_AddLine_Parameters_y1) },
                        { "x2", new Parameter("x2", LibrariesResources.Shapes_AddLine_Parameters_x2) },
                        { "y2", new Parameter("y2", LibrariesResources.Shapes_AddLine_Parameters_y2) },
                    }));

                methods.Add("AddRectangle", new Method(
                    "AddRectangle",
                    LibrariesResources.Shapes_AddRectangle,
                    returnsValue: true,
                    LibrariesResources.Shapes_AddRectangle_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "width", new Parameter("width", LibrariesResources.Shapes_AddRectangle_Parameters_width) },
                        { "height", new Parameter("height", LibrariesResources.Shapes_AddRectangle_Parameters_height) },
                    }));

                methods.Add("AddText", new Method(
                    "AddText",
                    LibrariesResources.Shapes_AddText,
                    returnsValue: true,
                    LibrariesResources.Shapes_AddText_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Shapes_AddText_Parameters_text) },
                    }));

                methods.Add("AddTriangle", new Method(
                    "AddTriangle",
                    LibrariesResources.Shapes_AddTriangle,
                    returnsValue: true,
                    LibrariesResources.Shapes_AddTriangle_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "x1", new Parameter("x1", LibrariesResources.Shapes_AddTriangle_Parameters_x1) },
                        { "y1", new Parameter("y1", LibrariesResources.Shapes_AddTriangle_Parameters_y1) },
                        { "x2", new Parameter("x2", LibrariesResources.Shapes_AddTriangle_Parameters_x2) },
                        { "y2", new Parameter("y2", LibrariesResources.Shapes_AddTriangle_Parameters_y2) },
                        { "x3", new Parameter("x3", LibrariesResources.Shapes_AddTriangle_Parameters_x3) },
                        { "y3", new Parameter("y3", LibrariesResources.Shapes_AddTriangle_Parameters_y3) },
                    }));

                methods.Add("Animate", new Method(
                    "Animate",
                    LibrariesResources.Shapes_Animate,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_Animate_Parameters_shapeName) },
                        { "x", new Parameter("x", LibrariesResources.Shapes_Animate_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.Shapes_Animate_Parameters_y) },
                        { "duration", new Parameter("duration", LibrariesResources.Shapes_Animate_Parameters_duration) },
                    }));

                methods.Add("GetLeft", new Method(
                    "GetLeft",
                    LibrariesResources.Shapes_GetLeft,
                    returnsValue: true,
                    LibrariesResources.Shapes_GetLeft_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_GetLeft_Parameters_shapeName) },
                    }));

                methods.Add("GetOpacity", new Method(
                    "GetOpacity",
                    LibrariesResources.Shapes_GetOpacity,
                    returnsValue: true,
                    LibrariesResources.Shapes_GetOpacity_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_GetOpacity_Parameters_shapeName) },
                    }));

                methods.Add("GetTop", new Method(
                    "GetTop",
                    LibrariesResources.Shapes_GetTop,
                    returnsValue: true,
                    LibrariesResources.Shapes_GetTop_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_GetTop_Parameters_shapeName) },
                    }));

                methods.Add("HideShape", new Method(
                    "HideShape",
                    LibrariesResources.Shapes_HideShape,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_HideShape_Parameters_shapeName) },
                    }));

                methods.Add("Move", new Method(
                    "Move",
                    LibrariesResources.Shapes_Move,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_Move_Parameters_shapeName) },
                        { "x", new Parameter("x", LibrariesResources.Shapes_Move_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.Shapes_Move_Parameters_y) },
                    }));

                methods.Add("Remove", new Method(
                    "Remove",
                    LibrariesResources.Shapes_Remove,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_Remove_Parameters_shapeName) },
                    }));

                methods.Add("Rotate", new Method(
                    "Rotate",
                    LibrariesResources.Shapes_Rotate,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_Rotate_Parameters_shapeName) },
                        { "angle", new Parameter("angle", LibrariesResources.Shapes_Rotate_Parameters_angle) },
                    }));

                methods.Add("SetOpacity", new Method(
                    "SetOpacity",
                    LibrariesResources.Shapes_SetOpacity,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_SetOpacity_Parameters_shapeName) },
                        { "level", new Parameter("level", LibrariesResources.Shapes_SetOpacity_Parameters_level) },
                    }));

                methods.Add("SetText", new Method(
                    "SetText",
                    LibrariesResources.Shapes_SetText,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_SetText_Parameters_shapeName) },
                        { "text", new Parameter("text", LibrariesResources.Shapes_SetText_Parameters_text) },
                    }));

                methods.Add("ShowShape", new Method(
                    "ShowShape",
                    LibrariesResources.Shapes_ShowShape,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_ShowShape_Parameters_shapeName) },
                    }));

                methods.Add("Zoom", new Method(
                    "Zoom",
                    LibrariesResources.Shapes_Zoom,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "shapeName", new Parameter("shapeName", LibrariesResources.Shapes_Zoom_Parameters_shapeName) },
                        { "scaleX", new Parameter("scaleX", LibrariesResources.Shapes_Zoom_Parameters_scaleX) },
                        { "scaleY", new Parameter("scaleY", LibrariesResources.Shapes_Zoom_Parameters_scaleY) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Shapes", new Library("Shapes", LibrariesResources.Shapes, methods, properties, events));
            }

            // Initialization code for library 'Sound'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Pause", new Method(
                    "Pause",
                    LibrariesResources.Sound_Pause,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.Sound_Pause_Parameters_filePath) },
                    }));

                methods.Add("Play", new Method(
                    "Play",
                    LibrariesResources.Sound_Play,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.Sound_Play_Parameters_filePath) },
                    }));

                methods.Add("PlayAndWait", new Method(
                    "PlayAndWait",
                    LibrariesResources.Sound_PlayAndWait,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.Sound_PlayAndWait_Parameters_filePath) },
                    }));

                methods.Add("PlayBellRing", new Method(
                    "PlayBellRing",
                    LibrariesResources.Sound_PlayBellRing,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayBellRingAndWait", new Method(
                    "PlayBellRingAndWait",
                    LibrariesResources.Sound_PlayBellRingAndWait,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayChime", new Method(
                    "PlayChime",
                    LibrariesResources.Sound_PlayChime,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayChimeAndWait", new Method(
                    "PlayChimeAndWait",
                    LibrariesResources.Sound_PlayChimeAndWait,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayChimes", new Method(
                    "PlayChimes",
                    LibrariesResources.Sound_PlayChimes,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayChimesAndWait", new Method(
                    "PlayChimesAndWait",
                    LibrariesResources.Sound_PlayChimesAndWait,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayClick", new Method(
                    "PlayClick",
                    LibrariesResources.Sound_PlayClick,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayClickAndWait", new Method(
                    "PlayClickAndWait",
                    LibrariesResources.Sound_PlayClickAndWait,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PlayMusic", new Method(
                    "PlayMusic",
                    LibrariesResources.Sound_PlayMusic,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "notes", new Parameter("notes", LibrariesResources.Sound_PlayMusic_Parameters_notes) },
                    }));

                methods.Add("Stop", new Method(
                    "Stop",
                    LibrariesResources.Sound_Stop,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "filePath", new Parameter("filePath", LibrariesResources.Sound_Stop_Parameters_filePath) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Sound", new Library("Sound", LibrariesResources.Sound, methods, properties, events));
            }

            // Initialization code for library 'Stack'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("GetCount", new Method(
                    "GetCount",
                    LibrariesResources.Stack_GetCount,
                    returnsValue: true,
                    LibrariesResources.Stack_GetCount_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "stackName", new Parameter("stackName", LibrariesResources.Stack_GetCount_Parameters_stackName) },
                    }));

                methods.Add("PopValue", new Method(
                    "PopValue",
                    LibrariesResources.Stack_PopValue,
                    returnsValue: true,
                    LibrariesResources.Stack_PopValue_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "stackName", new Parameter("stackName", LibrariesResources.Stack_PopValue_Parameters_stackName) },
                    }));

                methods.Add("PushValue", new Method(
                    "PushValue",
                    LibrariesResources.Stack_PushValue,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "stackName", new Parameter("stackName", LibrariesResources.Stack_PushValue_Parameters_stackName) },
                        { "value", new Parameter("value", LibrariesResources.Stack_PushValue_Parameters_value) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Stack", new Library("Stack", LibrariesResources.Stack, methods, properties, events));
            }

            // Initialization code for library 'Text'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Append", new Method(
                    "Append",
                    LibrariesResources.Text_Append,
                    returnsValue: true,
                    LibrariesResources.Text_Append_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text1", new Parameter("text1", LibrariesResources.Text_Append_Parameters_text1) },
                        { "text2", new Parameter("text2", LibrariesResources.Text_Append_Parameters_text2) },
                    }));

                methods.Add("ConvertToLowerCase", new Method(
                    "ConvertToLowerCase",
                    LibrariesResources.Text_ConvertToLowerCase,
                    returnsValue: true,
                    LibrariesResources.Text_ConvertToLowerCase_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_ConvertToLowerCase_Parameters_text) },
                    }));

                methods.Add("ConvertToUpperCase", new Method(
                    "ConvertToUpperCase",
                    LibrariesResources.Text_ConvertToUpperCase,
                    returnsValue: true,
                    LibrariesResources.Text_ConvertToUpperCase_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_ConvertToUpperCase_Parameters_text) },
                    }));

                methods.Add("EndsWith", new Method(
                    "EndsWith",
                    LibrariesResources.Text_EndsWith,
                    returnsValue: true,
                    LibrariesResources.Text_EndsWith_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_EndsWith_Parameters_text) },
                        { "subText", new Parameter("subText", LibrariesResources.Text_EndsWith_Parameters_subText) },
                    }));

                methods.Add("GetCharacter", new Method(
                    "GetCharacter",
                    LibrariesResources.Text_GetCharacter,
                    returnsValue: true,
                    LibrariesResources.Text_GetCharacter_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "characterCode", new Parameter("characterCode", LibrariesResources.Text_GetCharacter_Parameters_characterCode) },
                    }));

                methods.Add("GetCharacterCode", new Method(
                    "GetCharacterCode",
                    LibrariesResources.Text_GetCharacterCode,
                    returnsValue: true,
                    LibrariesResources.Text_GetCharacterCode_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "character", new Parameter("character", LibrariesResources.Text_GetCharacterCode_Parameters_character) },
                    }));

                methods.Add("GetIndexOf", new Method(
                    "GetIndexOf",
                    LibrariesResources.Text_GetIndexOf,
                    returnsValue: true,
                    LibrariesResources.Text_GetIndexOf_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_GetIndexOf_Parameters_text) },
                        { "subText", new Parameter("subText", LibrariesResources.Text_GetIndexOf_Parameters_subText) },
                    }));

                methods.Add("GetLength", new Method(
                    "GetLength",
                    LibrariesResources.Text_GetLength,
                    returnsValue: true,
                    LibrariesResources.Text_GetLength_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_GetLength_Parameters_text) },
                    }));

                methods.Add("GetSubText", new Method(
                    "GetSubText",
                    LibrariesResources.Text_GetSubText,
                    returnsValue: true,
                    LibrariesResources.Text_GetSubText_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_GetSubText_Parameters_text) },
                        { "start", new Parameter("start", LibrariesResources.Text_GetSubText_Parameters_start) },
                        { "length", new Parameter("length", LibrariesResources.Text_GetSubText_Parameters_length) },
                    }));

                methods.Add("GetSubTextToEnd", new Method(
                    "GetSubTextToEnd",
                    LibrariesResources.Text_GetSubTextToEnd,
                    returnsValue: true,
                    LibrariesResources.Text_GetSubTextToEnd_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_GetSubTextToEnd_Parameters_text) },
                        { "start", new Parameter("start", LibrariesResources.Text_GetSubTextToEnd_Parameters_start) },
                    }));

                methods.Add("IsSubText", new Method(
                    "IsSubText",
                    LibrariesResources.Text_IsSubText,
                    returnsValue: true,
                    LibrariesResources.Text_IsSubText_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_IsSubText_Parameters_text) },
                        { "subText", new Parameter("subText", LibrariesResources.Text_IsSubText_Parameters_subText) },
                    }));

                methods.Add("StartsWith", new Method(
                    "StartsWith",
                    LibrariesResources.Text_StartsWith,
                    returnsValue: true,
                    LibrariesResources.Text_StartsWith_ReturnValue,
                    new Dictionary<string, Parameter>
                    {
                        { "text", new Parameter("text", LibrariesResources.Text_StartsWith_Parameters_text) },
                        { "subText", new Parameter("subText", LibrariesResources.Text_StartsWith_Parameters_subText) },
                    }));

                var properties = new Dictionary<string, Property>();

                var events = new Dictionary<string, Event>();

                types.Add("Text", new Library("Text", LibrariesResources.Text, methods, properties, events));
            }

            // Initialization code for library 'TextWindow'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Clear", new Method(
                    "Clear",
                    LibrariesResources.TextWindow_Clear,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Hide", new Method(
                    "Hide",
                    LibrariesResources.TextWindow_Hide,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Pause", new Method(
                    "Pause",
                    LibrariesResources.TextWindow_Pause,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PauseIfVisible", new Method(
                    "PauseIfVisible",
                    LibrariesResources.TextWindow_PauseIfVisible,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PauseWithoutMessage", new Method(
                    "PauseWithoutMessage",
                    LibrariesResources.TextWindow_PauseWithoutMessage,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Read", new Method(
                    "Read",
                    LibrariesResources.TextWindow_Read,
                    returnsValue: true,
                    LibrariesResources.TextWindow_Read_ReturnValue,
                    new Dictionary<string, Parameter>()));

                methods.Add("ReadNumber", new Method(
                    "ReadNumber",
                    LibrariesResources.TextWindow_ReadNumber,
                    returnsValue: true,
                    LibrariesResources.TextWindow_ReadNumber_ReturnValue,
                    new Dictionary<string, Parameter>()));

                methods.Add("Show", new Method(
                    "Show",
                    LibrariesResources.TextWindow_Show,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Write", new Method(
                    "Write",
                    LibrariesResources.TextWindow_Write,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "data", new Parameter("data", LibrariesResources.TextWindow_Write_Parameters_data) },
                    }));

                methods.Add("WriteLine", new Method(
                    "WriteLine",
                    LibrariesResources.TextWindow_WriteLine,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "data", new Parameter("data", LibrariesResources.TextWindow_WriteLine_Parameters_data) },
                    }));

                var properties = new Dictionary<string, Property>
                {
                    { "BackgroundColor", new Property("BackgroundColor", LibrariesResources.TextWindow_BackgroundColor, hasGetter: true, hasSetter: true) },
                    { "CursorLeft", new Property("CursorLeft", LibrariesResources.TextWindow_CursorLeft, hasGetter: true, hasSetter: true) },
                    { "CursorTop", new Property("CursorTop", LibrariesResources.TextWindow_CursorTop, hasGetter: true, hasSetter: true) },
                    { "ForegroundColor", new Property("ForegroundColor", LibrariesResources.TextWindow_ForegroundColor, hasGetter: true, hasSetter: true) },
                    { "Left", new Property("Left", LibrariesResources.TextWindow_Left, hasGetter: true, hasSetter: true) },
                    { "Title", new Property("Title", LibrariesResources.TextWindow_Title, hasGetter: true, hasSetter: true) },
                    { "Top", new Property("Top", LibrariesResources.TextWindow_Top, hasGetter: true, hasSetter: true) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("TextWindow", new Library("TextWindow", LibrariesResources.TextWindow, methods, properties, events));
            }

            // Initialization code for library 'Timer'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Pause", new Method(
                    "Pause",
                    LibrariesResources.Timer_Pause,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Resume", new Method(
                    "Resume",
                    LibrariesResources.Timer_Resume,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                var properties = new Dictionary<string, Property>
                {
                    { "Interval", new Property("Interval", LibrariesResources.Timer_Interval, hasGetter: true, hasSetter: true) },
                };

                var events = new Dictionary<string, Event>
                {
                    { "Tick", new Event("Tick", LibrariesResources.Timer_Tick) },
                };

                types.Add("Timer", new Library("Timer", LibrariesResources.Timer, methods, properties, events));
            }

            // Initialization code for library 'Turtle'
            {
                var methods = new Dictionary<string, Method>();

                methods.Add("Hide", new Method(
                    "Hide",
                    LibrariesResources.Turtle_Hide,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Move", new Method(
                    "Move",
                    LibrariesResources.Turtle_Move,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "distance", new Parameter("distance", LibrariesResources.Turtle_Move_Parameters_distance) },
                    }));

                methods.Add("MoveTo", new Method(
                    "MoveTo",
                    LibrariesResources.Turtle_MoveTo,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "x", new Parameter("x", LibrariesResources.Turtle_MoveTo_Parameters_x) },
                        { "y", new Parameter("y", LibrariesResources.Turtle_MoveTo_Parameters_y) },
                    }));

                methods.Add("PenDown", new Method(
                    "PenDown",
                    LibrariesResources.Turtle_PenDown,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("PenUp", new Method(
                    "PenUp",
                    LibrariesResources.Turtle_PenUp,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Show", new Method(
                    "Show",
                    LibrariesResources.Turtle_Show,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("Turn", new Method(
                    "Turn",
                    LibrariesResources.Turtle_Turn,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>
                    {
                        { "angle", new Parameter("angle", LibrariesResources.Turtle_Turn_Parameters_angle) },
                    }));

                methods.Add("TurnLeft", new Method(
                    "TurnLeft",
                    LibrariesResources.Turtle_TurnLeft,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                methods.Add("TurnRight", new Method(
                    "TurnRight",
                    LibrariesResources.Turtle_TurnRight,
                    returnsValue: false,
                    returnValueDescription: null,
                    new Dictionary<string, Parameter>()));

                var properties = new Dictionary<string, Property>
                {
                    { "Angle", new Property("Angle", LibrariesResources.Turtle_Angle, hasGetter: true, hasSetter: true) },
                    { "Speed", new Property("Speed", LibrariesResources.Turtle_Speed, hasGetter: true, hasSetter: true) },
                    { "X", new Property("X", LibrariesResources.Turtle_X, hasGetter: true, hasSetter: true) },
                    { "Y", new Property("Y", LibrariesResources.Turtle_Y, hasGetter: true, hasSetter: true) },
                };

                var events = new Dictionary<string, Event>();

                types.Add("Turtle", new Library("Turtle", LibrariesResources.Turtle, methods, properties, events));
            }

            Types = types;
        }

        public static IReadOnlyDictionary<string, Library> Types { get; private set; }
    }
}
