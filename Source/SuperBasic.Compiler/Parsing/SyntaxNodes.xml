<root>
  <SyntaxNode Name="BaseStatementSyntax" IsAbstract="true" Inherits="BaseSyntaxNode" />

  <SyntaxNode Name="SubModuleStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="SubToken" Type="Token" TokenKinds="Sub" />
      <Member Name="NameToken" Type="Token" TokenKinds="Identifier" />
      <Member Name="Body" Type="StatementBlockSyntax" />
      <Member Name="EndSubToken" Type="Token" TokenKinds="EndSub" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="StatementBlockSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="Body" Type="BaseStatementSyntax" IsList="true" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="IfPartSyntax" Inherits="BaseSyntaxNode">
    <Members>
      <Member Name="IfToken" Type="Token" TokenKinds="If" />
      <Member Name="Condition" Type="BaseExpressionSyntax" />
      <Member Name="ThenToken" Type="Token" TokenKinds="Then" />
      <Member Name="Body" Type="StatementBlockSyntax" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ElseIfPartSyntax" Inherits="BaseSyntaxNode">
    <Members>
      <Member Name="ElseIfToken" Type="Token" TokenKinds="ElseIf" />
      <Member Name="Condition" Type="BaseExpressionSyntax" />
      <Member Name="ThenToken" Type="Token" TokenKinds="Then" />
      <Member Name="Body" Type="StatementBlockSyntax" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ElsePartSyntax" Inherits="BaseSyntaxNode">
    <Members>
      <Member Name="ElseToken" Type="Token" TokenKinds="Else" />
      <Member Name="Body" Type="StatementBlockSyntax" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="IfStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="IfPart" Type="IfPartSyntax" />
      <Member Name="ElseIfParts" Type="ElseIfPartSyntax" IsList="true" />
      <Member Name="ElsePartOpt" Type="ElsePartSyntax" IsOptional="true" />
      <Member Name="EndIfToken" Type="Token" TokenKinds="EndIf" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="WhileStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="WhileToken" Type="Token" TokenKinds="While" />
      <Member Name="Condition" Type="BaseExpressionSyntax" />
      <Member Name="Body" Type="StatementBlockSyntax" />
      <Member Name="EndWhileToken" Type="Token" TokenKinds="EndWhile" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="ForStepClauseSyntax" Inherits="BaseSyntaxNode">
    <Members>
      <Member Name="StepToken" Type="Token" TokenKinds="Step" />
      <Member Name="Expression" Type="BaseExpressionSyntax" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ForStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="ForToken" Type="Token" TokenKinds="For" />
      <Member Name="IdentifierToken" Type="Token" TokenKinds="Identifier" />
      <Member Name="EqualToken" Type="Token" TokenKinds="Equal" />
      <Member Name="FromExpression" Type="BaseExpressionSyntax" />
      <Member Name="ToToken" Type="Token" TokenKinds="To" />
      <Member Name="ToExpression" Type="BaseExpressionSyntax" />
      <Member Name="StepClauseOpt" Type="ForStepClauseSyntax" IsOptional="true" />
      <Member Name="Body" Type="StatementBlockSyntax" />
      <Member Name="EndForToken" Type="Token" TokenKinds="EndFor" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="LabelStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="LabelToken" Type="Token" TokenKinds="Identifier" />
      <Member Name="ColonToken" Type="Token" TokenKinds="Colon" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="GoToStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="GoToToken" Type="Token" TokenKinds="GoTo" />
      <Member Name="LabelToken" Type="Token" TokenKinds="Identifier" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="UnrecognizedStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="UnrecognizedToken" Type="Token" TokenKinds="*" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="ExpressionStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="Expression" Type="BaseExpressionSyntax" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="CommentStatementSyntax" Inherits="BaseStatementSyntax">
    <Members>
      <Member Name="CommentToken" Type="Token" TokenKinds="Comment" />
    </Members>
  </SyntaxNode>

  <SyntaxNode Name="BaseExpressionSyntax" IsAbstract="true" Inherits="BaseSyntaxNode" />

  <SyntaxNode Name="UnaryOperatorExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="OperatorToken" Type="Token" TokenKinds="Minus" />
      <Member Name="Expression" Type="BaseExpressionSyntax" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="BinaryOperatorExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="Left" Type="BaseExpressionSyntax" />
      <Member Name="OperatorToken" Type="Token" TokenKinds="Equal,NotEqual,Plus,Minus,Multiply,Divide,Colon,LessThan,GreaterThan,LessThanOrEqual,GreaterThanOrEqual,And,Or" />
      <Member Name="Right" Type="BaseExpressionSyntax" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ObjectAccessExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="BaseExpression" Type="BaseExpressionSyntax" />
      <Member Name="DotToken" Type="Token" TokenKinds="Dot" />
      <Member Name="IdentifierToken" Type="Token" TokenKinds="Identifier" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ArrayAccessExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="BaseExpression" Type="BaseExpressionSyntax" />
      <Member Name="LeftBracketToken" Type="Token" TokenKinds="LeftBracket" />
      <Member Name="IndexExpression" Type="BaseExpressionSyntax" />
      <Member Name="RightBracketToken" Type="Token" TokenKinds="RightBracket" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ArgumentSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="Expression" Type="BaseExpressionSyntax" />
      <Member Name="CommaTokenOpt" Type="Token" IsOptional="true" TokenKinds="Comma" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="InvocationExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="BaseExpression" Type="BaseExpressionSyntax" />
      <Member Name="LeftParenToken" Type="Token" TokenKinds="LeftParen" />
      <Member Name="Arguments" Type="ArgumentSyntax" IsList="true" />
      <Member Name="RightParenToken" Type="Token" TokenKinds="RightParen" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="ParenthesisExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="LeftParenToken" Type="Token" TokenKinds="LeftParen" />
      <Member Name="Expression" Type="BaseExpressionSyntax" />
      <Member Name="RightParenToken" Type="Token" TokenKinds="RightParen" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="IdentifierExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="IdentifierToken" Type="Token" TokenKinds="Identifier" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="StringLiteralExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="StringToken" Type="Token" TokenKinds="StringLiteral" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="NumberLiteralExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="NumberToken" Type="Token" TokenKinds="NumberLiteral" />
    </Members>
  </SyntaxNode>
  <SyntaxNode Name="UnrecognizedExpressionSyntax" Inherits="BaseExpressionSyntax">
    <Members>
      <Member Name="UnrecognizedToken" Type="Token" TokenKinds="*" />
    </Members>
  </SyntaxNode>
</root>