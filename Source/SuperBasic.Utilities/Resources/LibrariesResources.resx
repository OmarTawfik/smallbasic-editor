<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Array" xml:space="preserve">
    <value>This object provides a way of storing more than one value for a given name. These values can be accessed by another index.</value>
  </data>
  <data name="Array_ContainsIndex" xml:space="preserve">
    <value>Gets whether or not the array contains the specified index. This is very useful when deciding if the array's index was initialized by some value or not.</value>
  </data>
  <data name="Array_ContainsIndex_array" xml:space="preserve">
    <value>The array to check.</value>
  </data>
  <data name="Array_ContainsIndex_index" xml:space="preserve">
    <value>The index to check.</value>
  </data>
  <data name="Array_ContainsIndex_ReturnValue" xml:space="preserve">
    <value>"True" or "False" depending on if the index was present in the specified.</value>
  </data>
  <data name="Array_ContainsValue" xml:space="preserve">
    <value>Gets whether or not the array contains the specified value. This is very useful when deciding if the array's value was stored in some index.</value>
  </data>
  <data name="Array_ContainsValue_array" xml:space="preserve">
    <value>The array to check.</value>
  </data>
  <data name="Array_ContainsValue_value" xml:space="preserve">
    <value>The value to check.</value>
  </data>
  <data name="Array_ContainsValue_ReturnValue" xml:space="preserve">
    <value>"True" or "False" depending on if the value was present in the specified.</value>
  </data>
  <data name="Array_GetAllIndices" xml:space="preserve">
    <value>Gets all the indices for the array, as another array.</value>
  </data>
  <data name="Array_GetAllIndices_array" xml:space="preserve">
    <value>The array whose indices are requested.</value>
  </data>
  <data name="Array_GetAllIndices_ReturnValue" xml:space="preserve">
    <value>An array filled with all the indices of the specified array. The index of the returned array starts from 1.</value>
  </data>
  <data name="Array_GetItemCount" xml:space="preserve">
    <value>Gets the number of items stored in the array.</value>
  </data>
  <data name="Array_GetItemCount_array" xml:space="preserve">
    <value>The array for which the count is requested.</value>
  </data>
  <data name="Array_GetItemCount_ReturnValue" xml:space="preserve">
    <value>The number of items in the specified array.</value>
  </data>
  <data name="Array_IsArray" xml:space="preserve">
    <value>Gets whether or not a given variable is an array.</value>
  </data>
  <data name="Array_IsArray_array" xml:space="preserve">
    <value>The variable to check.</value>
  </data>
  <data name="Array_IsArray_ReturnValue" xml:space="preserve">
    <value>"True" if the specified variable is an array. "False" otherwise.</value>
  </data>
  <data name="Clock" xml:space="preserve">
    <value>This class provides access to the system clock</value>
  </data>
  <data name="Clock_Date" xml:space="preserve">
    <value>Gets the current system date.</value>
  </data>
  <data name="Clock_Day" xml:space="preserve">
    <value>Gets the current day of the month.</value>
  </data>
  <data name="Clock_ElapsedMilliseconds" xml:space="preserve">
    <value>Gets the number of milliseconds that have elapsed since 1900.</value>
  </data>
  <data name="Clock_Hour" xml:space="preserve">
    <value>Gets the current Hour.</value>
  </data>
  <data name="Clock_Millisecond" xml:space="preserve">
    <value>Gets the current Millisecond.</value>
  </data>
  <data name="Clock_Minute" xml:space="preserve">
    <value>Gets the current Minute.</value>
  </data>
  <data name="Clock_Month" xml:space="preserve">
    <value>Gets the current Month.</value>
  </data>
  <data name="Clock_Second" xml:space="preserve">
    <value>Gets the current Second.</value>
  </data>
  <data name="Clock_Time" xml:space="preserve">
    <value>Gets the current system time.</value>
  </data>
  <data name="Clock_WeekDay" xml:space="preserve">
    <value>Gets the current day of the week.</value>
  </data>
  <data name="Clock_Year" xml:space="preserve">
    <value>Gets the current year.</value>
  </data>
  <data name="Controls" xml:space="preserve">
    <value>The Controls object allows you to add, move and interact with controls.</value>
  </data>
  <data name="Controls_AddButton" xml:space="preserve">
    <value>Adds a button to the graphics window at the specified position.</value>
  </data>
  <data name="Controls_AddButton_caption" xml:space="preserve">
    <value>The caption to display in the button.</value>
  </data>
  <data name="Controls_AddButton_left" xml:space="preserve">
    <value>The x co-ordinate of the button.</value>
  </data>
  <data name="Controls_AddButton_top" xml:space="preserve">
    <value>The y co-ordinate of the button.</value>
  </data>
  <data name="Controls_AddButton_ReturnValue" xml:space="preserve">
    <value>The button that was just added to the Graphics Window.</value>
  </data>
  <data name="Controls_AddMultiLineTextBox" xml:space="preserve">
    <value>Adds a multi-line text input box to the graphics window at the specified position.</value>
  </data>
  <data name="Controls_AddMultiLineTextBox_left" xml:space="preserve">
    <value>The x co-ordinate of the text box.</value>
  </data>
  <data name="Controls_AddMultiLineTextBox_top" xml:space="preserve">
    <value>The y co-ordinate of the text box.</value>
  </data>
  <data name="Controls_AddMultiLineTextBox_ReturnValue" xml:space="preserve">
    <value>The text box that was just added to the Graphics Window.</value>
  </data>
  <data name="Controls_AddTextBox" xml:space="preserve">
    <value>Adds a text input box to the graphics window at the specified position.</value>
  </data>
  <data name="Controls_AddTextBox_left" xml:space="preserve">
    <value>The x co-ordinate of the text box.</value>
  </data>
  <data name="Controls_AddTextBox_top" xml:space="preserve">
    <value>The y co-ordinate of the text box.</value>
  </data>
  <data name="Controls_AddTextBox_ReturnValue" xml:space="preserve">
    <value>The text box that was just added to the Graphics Window.</value>
  </data>
  <data name="Controls_GetButtonCaption" xml:space="preserve">
    <value>Gets the current caption of the specified button.</value>
  </data>
  <data name="Controls_GetButtonCaption_buttonName" xml:space="preserve">
    <value>The Button whose caption is requested.</value>
  </data>
  <data name="Controls_GetButtonCaption_ReturnValue" xml:space="preserve">
    <value>The current caption of the button.</value>
  </data>
  <data name="Controls_GetTextBoxText" xml:space="preserve">
    <value>Gets the current text of the specified TextBox.</value>
  </data>
  <data name="Controls_GetTextBoxText_textBoxName" xml:space="preserve">
    <value>The TextBox whose text is requested.</value>
  </data>
  <data name="Controls_GetTextBoxText_ReturnValue" xml:space="preserve">
    <value>The text in the TextBox</value>
  </data>
  <data name="Controls_HideControl" xml:space="preserve">
    <value>Hides an already added control.</value>
  </data>
  <data name="Controls_HideControl_controlName" xml:space="preserve">
    <value>The name of the control.</value>
  </data>
  <data name="Controls_Move" xml:space="preserve">
    <value>Moves the control with the specified name to a new position.</value>
  </data>
  <data name="Controls_Move_control" xml:space="preserve">
    <value>The name of the control to move.</value>
  </data>
  <data name="Controls_Move_x" xml:space="preserve">
    <value>The x co-ordinate of the new position.</value>
  </data>
  <data name="Controls_Move_y" xml:space="preserve">
    <value>The y co-ordinate of the new position.</value>
  </data>
  <data name="Controls_Remove" xml:space="preserve">
    <value>Removes a control from the Graphics Window.</value>
  </data>
  <data name="Controls_Remove_controlName" xml:space="preserve">
    <value>The name of the control that needs to be removed.</value>
  </data>
  <data name="Controls_SetButtonCaption" xml:space="preserve">
    <value>Sets the caption of the specified button.</value>
  </data>
  <data name="Controls_SetButtonCaption_buttonName" xml:space="preserve">
    <value>The Button whose caption needs to be set.</value>
  </data>
  <data name="Controls_SetButtonCaption_caption" xml:space="preserve">
    <value>The new caption for the button.</value>
  </data>
  <data name="Controls_SetSize" xml:space="preserve">
    <value>Sets the size of the control.</value>
  </data>
  <data name="Controls_SetSize_control" xml:space="preserve">
    <value>The name of the control to be resized.</value>
  </data>
  <data name="Controls_SetSize_width" xml:space="preserve">
    <value>The width of the control.</value>
  </data>
  <data name="Controls_SetSize_height" xml:space="preserve">
    <value>The height of the control.</value>
  </data>
  <data name="Controls_SetTextBoxText" xml:space="preserve">
    <value>Sets the text of the specified TextBox.</value>
  </data>
  <data name="Controls_SetTextBoxText_textBoxName" xml:space="preserve">
    <value>The TextBox whose text needs to be set.</value>
  </data>
  <data name="Controls_SetTextBoxText_text" xml:space="preserve">
    <value>The new text for the TextBox.</value>
  </data>
  <data name="Controls_ShowControl" xml:space="preserve">
    <value>Shows a previously hidden control.</value>
  </data>
  <data name="Controls_ShowControl_controlName" xml:space="preserve">
    <value>The name of the control.</value>
  </data>
  <data name="Controls_LastClickedButton" xml:space="preserve">
    <value>Gets the last Button that was clicked on the Graphics Window.</value>
  </data>
  <data name="Controls_LastTypedTextBox" xml:space="preserve">
    <value>Gets the last TextBox, text was typed into.</value>
  </data>
  <data name="Controls_ButtonClicked" xml:space="preserve">
    <value>Raises an event when any button control is clicked.</value>
  </data>
  <data name="Controls_TextTyped" xml:space="preserve">
    <value>Raises an event when text is typed into any TextBox control.</value>
  </data>
  <data name="Desktop" xml:space="preserve">
    <value>This class provides methods to interact with the desktop.</value>
  </data>
  <data name="Desktop_SetWallPaper" xml:space="preserve">
    <value>Sets the specified picture as the desktop's wallpaper. This file could be a local file or a network file or even an Internet URL.</value>
  </data>
  <data name="Desktop_SetWallPaper_fileOrUrl" xml:space="preserve">
    <value>The filename or URL of the picture.</value>
  </data>
  <data name="Desktop_Height" xml:space="preserve">
    <value>Gets the screen height of the primary desktop.</value>
  </data>
  <data name="Desktop_Width" xml:space="preserve">
    <value>Gets the screen width of the primary desktop.</value>
  </data>
  <data name="Dictionary" xml:space="preserve">
    <value>This class provides access to an online Dictionary service.</value>
  </data>
  <data name="Dictionary_GetDefinition" xml:space="preserve">
    <value>Gets the definition of a word in English. The same as GetDefinitionEnglishToEnglish.</value>
  </data>
  <data name="Dictionary_GetDefinition_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinition_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, English to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToFrench" xml:space="preserve">
    <value>Gets the definition of a word, English to French.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToFrench_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToFrench_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToGerman" xml:space="preserve">
    <value>Gets the definition of a word, English to German.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToGerman_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToGerman_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToItalian" xml:space="preserve">
    <value>Gets the definition of a word, English to Italian.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToItalian_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToItalian_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToJapanese" xml:space="preserve">
    <value>Gets the definition of a word, English to Japanese.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToJapanese_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToJapanese_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToKorean" xml:space="preserve">
    <value>Gets the definition of a word, English to Korean.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToKorean_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToKorean_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToSimplifiedChinese" xml:space="preserve">
    <value>Gets the definition of a word, English to Simplified Chinese.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToSimplifiedChinese_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToSimplifiedChinese_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToSpanish" xml:space="preserve">
    <value>Gets the definition of a word, English to Spanish.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToSpanish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToSpanish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToTraditionalChinese" xml:space="preserve">
    <value>Gets the definition of a word, English to Traditional Chinese.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToTraditionalChinese_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionEnglishToTraditionalChinese_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionFrenchToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, French to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionFrenchToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionFrenchToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionGermanToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, German to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionGermanToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionGermanToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionItalianToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, Itlian to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionItalianToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionItalianToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionJapaneseToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, Japanese to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionJapaneseToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionJapaneseToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionKoreanToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, Korean to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionKoreanToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionKoreanToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionSimplifiedChineseToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, Simplified Chinese to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionSimplifiedChineseToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionSimplifiedChineseToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionSpanishToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, Spanish to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionSpanishToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionSpanishToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="Dictionary_GetDefinitionTraditionalChineseToEnglish" xml:space="preserve">
    <value>Gets the definition of a word, Traditional Chinese to English.</value>
  </data>
  <data name="Dictionary_GetDefinitionTraditionalChineseToEnglish_word" xml:space="preserve">
    <value>The word to define.</value>
  </data>
  <data name="Dictionary_GetDefinitionTraditionalChineseToEnglish_ReturnValue" xml:space="preserve">
    <value>The definition(s) of the specified word.</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>The File object provides methods to access, read and write information from and to a file on disk. Using this object, it is possible to save and open settings across multiple sessions of your program.</value>
  </data>
  <data name="File_AppendContents" xml:space="preserve">
    <value>Opens the specified file and appends the contents to the end of the file.</value>
  </data>
  <data name="File_AppendContents_filePath" xml:space="preserve">
    <value>The full path of the file to read from. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_AppendContents_contents" xml:space="preserve">
    <value>The contents to append to the end of the file.</value>
  </data>
  <data name="File_AppendContents_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_CopyFile" xml:space="preserve">
    <value>Copies the specified source file to the destination file path. If the destination points to a location that doesn't exist, the method will attempt to create it automatically. Existing files will be overwritten. It is always best to check if the destination file exists if you don't want to overwrite existing files.</value>
  </data>
  <data name="File_CopyFile_sourceFilePath" xml:space="preserve">
    <value>The full path of the file that needs to be copied. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_CopyFile_destinationFilePath" xml:space="preserve">
    <value>The destination location or the file path.</value>
  </data>
  <data name="File_CopyFile_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_CreateDirectory" xml:space="preserve">
    <value>Creates the specified directory.</value>
  </data>
  <data name="File_CreateDirectory_directoryPath" xml:space="preserve">
    <value>The full path of the directory to be created.</value>
  </data>
  <data name="File_CreateDirectory_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_DeleteDirectory" xml:space="preserve">
    <value>Deletes the specified directory.</value>
  </data>
  <data name="File_DeleteDirectory_directoryPath" xml:space="preserve">
    <value>The full path of the directory to be deleted.</value>
  </data>
  <data name="File_DeleteDirectory_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_DeleteFile" xml:space="preserve">
    <value>Deletes the specified file.</value>
  </data>
  <data name="File_DeleteFile_filePath" xml:space="preserve">
    <value>The destination location or the file path. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_DeleteFile_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_GetDirectories" xml:space="preserve">
    <value>Gets the path of all the directories in the specified directory path.</value>
  </data>
  <data name="File_GetDirectories_directoryPath" xml:space="preserve">
    <value>The directory to look for subdirectories.</value>
  </data>
  <data name="File_GetDirectories_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return the list of directories as an array. Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_GetFiles" xml:space="preserve">
    <value>Gets the path of all the files in the specified directory path.</value>
  </data>
  <data name="File_GetFiles_directoryPath" xml:space="preserve">
    <value>The directory to look for files.</value>
  </data>
  <data name="File_GetFiles_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return the files as an array. Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_GetSettingsFilePath" xml:space="preserve">
    <value>Gets the full path of the settings file for this program. The settings file name is based on the program's name and is present in the same location as the program.</value>
  </data>
  <data name="File_GetSettingsFilePath_ReturnValue" xml:space="preserve">
    <value>The full path of the settings file specific for this program.</value>
  </data>
  <data name="File_GetTemporaryFilePath" xml:space="preserve">
    <value>Creates a new temporary file in a temporary directory and returns the full file path.</value>
  </data>
  <data name="File_GetTemporaryFilePath_ReturnValue" xml:space="preserve">
    <value>The full file path of the temporary file.</value>
  </data>
  <data name="File_InsertLine" xml:space="preserve">
    <value>Opens the specified file and inserts the contents at the specified line number. This operation will not overwrite any existing content at the specified line.</value>
  </data>
  <data name="File_InsertLine_filePath" xml:space="preserve">
    <value>The full path of the file to read from. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_InsertLine_lineNumber" xml:space="preserve">
    <value>The line number of the text to insert.</value>
  </data>
  <data name="File_InsertLine_contents" xml:space="preserve">
    <value>The contents to insert into the file.</value>
  </data>
  <data name="File_InsertLine_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_ReadContents" xml:space="preserve">
    <value>Opens a file and reads the entire file's contents. This method will be fast for small files that are less than an MB in size, but will start to slow down and will be noticeable for files greater than 10MB.</value>
  </data>
  <data name="File_ReadContents_filePath" xml:space="preserve">
    <value>The full path of the file to read. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_ReadContents_ReturnValue" xml:space="preserve">
    <value>The entire contents of the file.</value>
  </data>
  <data name="File_ReadLine" xml:space="preserve">
    <value>Opens the specified file and reads the contents at the specified line number.</value>
  </data>
  <data name="File_ReadLine_filePath" xml:space="preserve">
    <value>The full path of the file to read from. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_ReadLine_lineNumber" xml:space="preserve">
    <value>The line number of the text to be read.</value>
  </data>
  <data name="File_ReadLine_ReturnValue" xml:space="preserve">
    <value>The text at the specified line of the specified file.</value>
  </data>
  <data name="File_WriteContents" xml:space="preserve">
    <value>Opens a file and writes the specified contents into it, replacing the original contents with the new content.</value>
  </data>
  <data name="File_WriteContents_filePath" xml:space="preserve">
    <value>The full path of the file to write to. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_WriteContents_contents" xml:space="preserve">
    <value>The contents to write into the specified file.</value>
  </data>
  <data name="File_WriteContents_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_WriteLine" xml:space="preserve">
    <value>Opens the specified file and write the contents at the specified line number. This operation will overwrite any existing content at the specified line.</value>
  </data>
  <data name="File_WriteLine_filePath" xml:space="preserve">
    <value>The full path of the file to read from. An example of a full path will be c:\temp\settings.data.</value>
  </data>
  <data name="File_WriteLine_lineNumber" xml:space="preserve">
    <value>The line number of the text to write.</value>
  </data>
  <data name="File_WriteLine_contents" xml:space="preserve">
    <value>The contents to write at the specified line of the specified file.</value>
  </data>
  <data name="File_WriteLine_ReturnValue" xml:space="preserve">
    <value>If the operation was successful, this will return "SUCCESS". Otherwise, it will return "FAILED".</value>
  </data>
  <data name="File_LastError" xml:space="preserve">
    <value>Gets or sets the last encountered file operation based error message. This property is useful for finding out when some method fails to execute.</value>
  </data>
  <data name="Flickr" xml:space="preserve">
    <value>This class provides access to Flickr photo services.</value>
  </data>
  <data name="Flickr_GetPictureOfMoment" xml:space="preserve">
    <value>Gets the URL for the picture of the moment.</value>
  </data>
  <data name="Flickr_GetPictureOfMoment_ReturnValue" xml:space="preserve">
    <value>A file URL for Flickr's picture of the moment</value>
  </data>
  <data name="Flickr_GetRandomPicture" xml:space="preserve">
    <value>Gets the URL for a random picture tagged with the specified tag.</value>
  </data>
  <data name="Flickr_GetRandomPicture_tag" xml:space="preserve">
    <value>The tag for the requested picture.</value>
  </data>
  <data name="Flickr_GetRandomPicture_ReturnValue" xml:space="preserve">
    <value>A file URL for Flickr's random picture</value>
  </data>
  <data name="GraphicsWindow" xml:space="preserve">
    <value>The GraphicsWindow provides graphics related input and output functionality. For example, using this class, it is possible to draw and fill circles and rectangles.</value>
  </data>
  <data name="GraphicsWindow_Clear" xml:space="preserve">
    <value>Clears the window.</value>
  </data>
  <data name="GraphicsWindow_DrawBoundText" xml:space="preserve">
    <value>Draws a line of text on the screen at the specified location.</value>
  </data>
  <data name="GraphicsWindow_DrawBoundText_x" xml:space="preserve">
    <value>The x co-ordinate of the text start point.</value>
  </data>
  <data name="GraphicsWindow_DrawBoundText_y" xml:space="preserve">
    <value>The y co-ordinate of the text start point.</value>
  </data>
  <data name="GraphicsWindow_DrawBoundText_width" xml:space="preserve">
    <value>The maximum available width. This parameter helps define when the text should wrap.</value>
  </data>
  <data name="GraphicsWindow_DrawBoundText_text" xml:space="preserve">
    <value>The text to draw.</value>
  </data>
  <data name="GraphicsWindow_DrawEllipse" xml:space="preserve">
    <value>Draws an ellipse on the screen using the selected Pen.</value>
  </data>
  <data name="GraphicsWindow_DrawEllipse_x" xml:space="preserve">
    <value>The x co-ordinate of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_DrawEllipse_y" xml:space="preserve">
    <value>The y co-ordinate of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_DrawEllipse_width" xml:space="preserve">
    <value>The width of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_DrawEllipse_height" xml:space="preserve">
    <value>The height of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_DrawImage" xml:space="preserve">
    <value>Draws the specified image from memory on to the screen.</value>
  </data>
  <data name="GraphicsWindow_DrawImage_imageName" xml:space="preserve">
    <value>The name of the image to draw.</value>
  </data>
  <data name="GraphicsWindow_DrawImage_x" xml:space="preserve">
    <value>The x co-ordinate of the point to draw the image at.</value>
  </data>
  <data name="GraphicsWindow_DrawImage_y" xml:space="preserve">
    <value>The y co-ordinate of the point to draw the image at.</value>
  </data>
  <data name="GraphicsWindow_DrawLine" xml:space="preserve">
    <value>Draws a line from one point to another.</value>
  </data>
  <data name="GraphicsWindow_DrawLine_x1" xml:space="preserve">
    <value>The x co-ordinate of the first point.</value>
  </data>
  <data name="GraphicsWindow_DrawLine_y1" xml:space="preserve">
    <value>The y co-ordinate of the first point.</value>
  </data>
  <data name="GraphicsWindow_DrawLine_x2" xml:space="preserve">
    <value>The x co-ordinate of the second point.</value>
  </data>
  <data name="GraphicsWindow_DrawLine_y2" xml:space="preserve">
    <value>The y co-ordinate of the second point.</value>
  </data>
  <data name="GraphicsWindow_DrawRectangle" xml:space="preserve">
    <value>Draws a rectangle on the screen using the selected Pen.</value>
  </data>
  <data name="GraphicsWindow_DrawRectangle_x" xml:space="preserve">
    <value>The x co-ordinate of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_DrawRectangle_y" xml:space="preserve">
    <value>The y co-ordinate of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_DrawRectangle_width" xml:space="preserve">
    <value>The width of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_DrawRectangle_height" xml:space="preserve">
    <value>The height of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_DrawResizedImage" xml:space="preserve">
    <value>Draws the specified image from memory on to the screen, in the specified size.</value>
  </data>
  <data name="GraphicsWindow_DrawResizedImage_imageName" xml:space="preserve">
    <value>The name of the image to draw</value>
  </data>
  <data name="GraphicsWindow_DrawResizedImage_x" xml:space="preserve">
    <value>The x co-ordinate of the point to draw the image at.</value>
  </data>
  <data name="GraphicsWindow_DrawResizedImage_y" xml:space="preserve">
    <value>The y co-ordinate of the point to draw the image at.</value>
  </data>
  <data name="GraphicsWindow_DrawResizedImage_width" xml:space="preserve">
    <value>The width to draw the image.</value>
  </data>
  <data name="GraphicsWindow_DrawResizedImage_height" xml:space="preserve">
    <value>The height to draw the image.</value>
  </data>
  <data name="GraphicsWindow_DrawText" xml:space="preserve">
    <value>Draws a line of text on the screen at the specified location.</value>
  </data>
  <data name="GraphicsWindow_DrawText_x" xml:space="preserve">
    <value>The x co-ordinate of the text start point.</value>
  </data>
  <data name="GraphicsWindow_DrawText_y" xml:space="preserve">
    <value>The y co-ordinate of the text start point.</value>
  </data>
  <data name="GraphicsWindow_DrawText_text" xml:space="preserve">
    <value>The text to draw</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle" xml:space="preserve">
    <value>Draws a triangle on the screen using the selected pen.</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle_x1" xml:space="preserve">
    <value>The x co-ordinate of the first point.</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle_y1" xml:space="preserve">
    <value>The y co-ordinate of the first point.</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle_x2" xml:space="preserve">
    <value>The x co-ordinate of the second point.</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle_y2" xml:space="preserve">
    <value>The y co-ordinate of the second point.</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle_x3" xml:space="preserve">
    <value>The x co-ordinate of the third point.</value>
  </data>
  <data name="GraphicsWindow_DrawTriangle_y3" xml:space="preserve">
    <value>The y co-ordinate of the third point.</value>
  </data>
  <data name="GraphicsWindow_FillEllipse" xml:space="preserve">
    <value>Fills an ellipse on the screen using the selected Brush.</value>
  </data>
  <data name="GraphicsWindow_FillEllipse_x" xml:space="preserve">
    <value>The x co-ordinate of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_FillEllipse_y" xml:space="preserve">
    <value>The y co-ordinate of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_FillEllipse_width" xml:space="preserve">
    <value>The width of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_FillEllipse_height" xml:space="preserve">
    <value>The height of the ellipse.</value>
  </data>
  <data name="GraphicsWindow_FillRectangle" xml:space="preserve">
    <value>Fills a rectangle on the screen using the selected Brush.</value>
  </data>
  <data name="GraphicsWindow_FillRectangle_x" xml:space="preserve">
    <value>The x co-ordinate of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_FillRectangle_y" xml:space="preserve">
    <value>The y co-ordinate of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_FillRectangle_width" xml:space="preserve">
    <value>The width of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_FillRectangle_height" xml:space="preserve">
    <value>The height of the rectangle.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle" xml:space="preserve">
    <value>Draws and fills a triangle on the screen using the selected brush.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle_x1" xml:space="preserve">
    <value>The x co-ordinate of the first point.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle_y1" xml:space="preserve">
    <value>The y co-ordinate of the first point.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle_x2" xml:space="preserve">
    <value>The x co-ordinate of the second point.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle_y2" xml:space="preserve">
    <value>The y co-ordinate of the second point.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle_x3" xml:space="preserve">
    <value>The x co-ordinate of the third point.</value>
  </data>
  <data name="GraphicsWindow_FillTriangle_y3" xml:space="preserve">
    <value>The y co-ordinate of the third point.</value>
  </data>
  <data name="GraphicsWindow_GetColorFromRGB" xml:space="preserve">
    <value>Constructs a color given the Red, Green and Blue values.</value>
  </data>
  <data name="GraphicsWindow_GetColorFromRGB_red" xml:space="preserve">
    <value>The red component of the Color (0-255).</value>
  </data>
  <data name="GraphicsWindow_GetColorFromRGB_green" xml:space="preserve">
    <value>The green component of the color (0-255).</value>
  </data>
  <data name="GraphicsWindow_GetColorFromRGB_blue" xml:space="preserve">
    <value>The blue component of the color (0-255).</value>
  </data>
  <data name="GraphicsWindow_GetColorFromRGB_ReturnValue" xml:space="preserve">
    <value>Returns a color that can be used to set the brush or pen color.</value>
  </data>
  <data name="GraphicsWindow_GetPixel" xml:space="preserve">
    <value>Gets the color of the pixel at the specified x and y co-ordinates.</value>
  </data>
  <data name="GraphicsWindow_GetPixel_x" xml:space="preserve">
    <value>The x co-ordinate of the pixel.</value>
  </data>
  <data name="GraphicsWindow_GetPixel_y" xml:space="preserve">
    <value>The y co-ordinate of the pixel.</value>
  </data>
  <data name="GraphicsWindow_GetPixel_ReturnValue" xml:space="preserve">
    <value>The color of the pixel.</value>
  </data>
  <data name="GraphicsWindow_GetRandomColor" xml:space="preserve">
    <value>Gets a valid random color.</value>
  </data>
  <data name="GraphicsWindow_GetRandomColor_ReturnValue" xml:space="preserve">
    <value>A valid random color.</value>
  </data>
  <data name="GraphicsWindow_Hide" xml:space="preserve">
    <value>Hides the Graphics window.</value>
  </data>
  <data name="GraphicsWindow_SetPixel" xml:space="preserve">
    <value>Draws the pixel specified by the x and y co-ordinates using the specified color.</value>
  </data>
  <data name="GraphicsWindow_SetPixel_x" xml:space="preserve">
    <value>The x co-ordinate of the pixel.</value>
  </data>
  <data name="GraphicsWindow_SetPixel_y" xml:space="preserve">
    <value>The y co-ordinate of the pixel.</value>
  </data>
  <data name="GraphicsWindow_SetPixel_color" xml:space="preserve">
    <value>The color of the pixel to set.</value>
  </data>
  <data name="GraphicsWindow_Show" xml:space="preserve">
    <value>Shows the Graphics window to enable interactions with it.</value>
  </data>
  <data name="GraphicsWindow_ShowMessage" xml:space="preserve">
    <value>Displays a message box to the user.</value>
  </data>
  <data name="GraphicsWindow_ShowMessage_text" xml:space="preserve">
    <value>The text to be displayed on the message box.</value>
  </data>
  <data name="GraphicsWindow_ShowMessage_title" xml:space="preserve">
    <value>The title for the message box.</value>
  </data>
  <data name="GraphicsWindow_BackgroundColor" xml:space="preserve">
    <value>Gets or sets the Background color of the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_BrushColor" xml:space="preserve">
    <value>Gets or sets the brush color to be used to fill shapes drawn on the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_CanResize" xml:space="preserve">
    <value>Specifies whether or not the Graphics Window can be resized by the user.</value>
  </data>
  <data name="GraphicsWindow_FontBold" xml:space="preserve">
    <value>Gets or sets whether or not the font to be used when drawing text on the Graphics Window, is bold.</value>
  </data>
  <data name="GraphicsWindow_FontItalic" xml:space="preserve">
    <value>Gets or sets whether or not the font to be used when drawing text on the Graphics Window, is italic.</value>
  </data>
  <data name="GraphicsWindow_FontName" xml:space="preserve">
    <value>Gets or sets the Font Name to be used when drawing text on the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_FontSize" xml:space="preserve">
    <value>Gets or sets the Font Size to be used when drawing text on the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_Height" xml:space="preserve">
    <value>Gets or sets the Height of the graphics window.</value>
  </data>
  <data name="GraphicsWindow_LastKey" xml:space="preserve">
    <value>Gets the last key that was pressed or released.</value>
  </data>
  <data name="GraphicsWindow_LastText" xml:space="preserve">
    <value>Gets the last text that was entered on the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_Left" xml:space="preserve">
    <value>Gets or sets the Left Position of the graphics window.</value>
  </data>
  <data name="GraphicsWindow_MouseX" xml:space="preserve">
    <value>Gets the x-position of the mouse relative to the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_MouseY" xml:space="preserve">
    <value>Gets the y-position of the mouse relative to the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_PenColor" xml:space="preserve">
    <value>Gets or sets the color of the pen used to draw shapes on the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_PenWidth" xml:space="preserve">
    <value>Gets or sets the width of the pen used to draw shapes on the Graphics Window.</value>
  </data>
  <data name="GraphicsWindow_Title" xml:space="preserve">
    <value>Gets or sets the title for the graphics window.</value>
  </data>
  <data name="GraphicsWindow_Top" xml:space="preserve">
    <value>Gets or sets the Top Position of the graphics window.</value>
  </data>
  <data name="GraphicsWindow_Width" xml:space="preserve">
    <value>Gets or sets the Width of the graphics window.</value>
  </data>
  <data name="GraphicsWindow_KeyDown" xml:space="preserve">
    <value>Raises an event when a key is pressed down on the keyboard.</value>
  </data>
  <data name="GraphicsWindow_KeyUp" xml:space="preserve">
    <value>Raises an event when a key is released on the keyboard.</value>
  </data>
  <data name="GraphicsWindow_MouseDown" xml:space="preserve">
    <value>Raises an event when the mouse button is clicked down.</value>
  </data>
  <data name="GraphicsWindow_MouseMove" xml:space="preserve">
    <value>Raises an event when the mouse is moved around.</value>
  </data>
  <data name="GraphicsWindow_MouseUp" xml:space="preserve">
    <value>Raises an event when the mouse button is released.</value>
  </data>
  <data name="GraphicsWindow_TextInput" xml:space="preserve">
    <value>Raises an event when text is entered on the GraphicsWindow.</value>
  </data>
  <data name="ImageList" xml:space="preserve">
    <value>This class helps to load and store images in memory.</value>
  </data>
  <data name="ImageList_GetHeightOfImage" xml:space="preserve">
    <value>Gets the height of the stored image.</value>
  </data>
  <data name="ImageList_GetHeightOfImage_imageName" xml:space="preserve">
    <value>The name of the image in memory.</value>
  </data>
  <data name="ImageList_GetHeightOfImage_ReturnValue" xml:space="preserve">
    <value>The height of the specified image.</value>
  </data>
  <data name="ImageList_GetWidthOfImage" xml:space="preserve">
    <value>Gets the width of the stored image.</value>
  </data>
  <data name="ImageList_GetWidthOfImage_imageName" xml:space="preserve">
    <value>The name of the image in memory.</value>
  </data>
  <data name="ImageList_GetWidthOfImage_ReturnValue" xml:space="preserve">
    <value>The width of the specified image.</value>
  </data>
  <data name="ImageList_LoadImage" xml:space="preserve">
    <value>Loads an image from a file or the Internet into memory.</value>
  </data>
  <data name="ImageList_LoadImage_fileNameOrUrl" xml:space="preserve">
    <value>The file name to load the image from. This could be a local file or a URL to the Internet location.</value>
  </data>
  <data name="ImageList_LoadImage_ReturnValue" xml:space="preserve">
    <value>Returns the name of the image that was loaded.</value>
  </data>
  <data name="Math" xml:space="preserve">
    <value>The Math class provides lots of useful mathematics related methods</value>
  </data>
  <data name="Math_Abs" xml:space="preserve">
    <value>Gets the absolute value of the given number. For example, -32.233 will return 32.233.</value>
  </data>
  <data name="Math_Abs_number" xml:space="preserve">
    <value>The number to get the absolute value for.</value>
  </data>
  <data name="Math_Abs_ReturnValue" xml:space="preserve">
    <value>The absolute value of the given number.</value>
  </data>
  <data name="Math_ArcCos" xml:space="preserve">
    <value>Gets the angle in radians, given the cosine value.</value>
  </data>
  <data name="Math_ArcCos_cosValue" xml:space="preserve">
    <value>The cosine value whose angle is needed.</value>
  </data>
  <data name="Math_ArcCos_ReturnValue" xml:space="preserve">
    <value>The angle (in radians) for the given cosine Value.</value>
  </data>
  <data name="Math_ArcSin" xml:space="preserve">
    <value>Gets the angle in radians, given the sin value.</value>
  </data>
  <data name="Math_ArcSin_sinValue" xml:space="preserve">
    <value>The sine value whose angle is needed.</value>
  </data>
  <data name="Math_ArcSin_ReturnValue" xml:space="preserve">
    <value>The angle (in radians) for the given sine Value.</value>
  </data>
  <data name="Math_ArcTan" xml:space="preserve">
    <value>Gets the angle in radians, given the tangent value.</value>
  </data>
  <data name="Math_ArcTan_tanValue" xml:space="preserve">
    <value>The tangent value whose angle is needed.</value>
  </data>
  <data name="Math_ArcTan_ReturnValue" xml:space="preserve">
    <value>The angle (in radians) for the given tangent Value.</value>
  </data>
  <data name="Math_Ceiling" xml:space="preserve">
    <value>Returns the smallest integer that is greater than or equal to the argument. It rounds up the integer value. For example, 32.233 will return 33. Also, 44 will return 44.</value>
  </data>
  <data name="Math_Ceiling_number" xml:space="preserve">
    <value>The number whose ceiling is required.</value>
  </data>
  <data name="Math_Ceiling_ReturnValue" xml:space="preserve">
    <value>The ceiling value of the given number.</value>
  </data>
  <data name="Math_Cos" xml:space="preserve">
    <value>Gets the cosine of the given angle in radians.</value>
  </data>
  <data name="Math_Cos_angle" xml:space="preserve">
    <value>The angle whose cosine is needed (in radians).</value>
  </data>
  <data name="Math_Cos_ReturnValue" xml:space="preserve">
    <value>The cosine of the given angle.</value>
  </data>
  <data name="Math_Floor" xml:space="preserve">
    <value>Returns the largest integer that is less than or equal to the argument. It rounds down the integer value. For example, 32.233 will return 32. Also, 44 will return 44.</value>
  </data>
  <data name="Math_Floor_number" xml:space="preserve">
    <value>The number whose floor value is required.</value>
  </data>
  <data name="Math_Floor_ReturnValue" xml:space="preserve">
    <value>The floor value of the given number.</value>
  </data>
  <data name="Math_GetDegrees" xml:space="preserve">
    <value>Converts a given angle in radians to degrees.</value>
  </data>
  <data name="Math_GetDegrees_angle" xml:space="preserve">
    <value>The angle in radians.</value>
  </data>
  <data name="Math_GetDegrees_ReturnValue" xml:space="preserve">
    <value>The converted angle in degrees.</value>
  </data>
  <data name="Math_GetRadians" xml:space="preserve">
    <value>Converts a given angle in degrees to radians.</value>
  </data>
  <data name="Math_GetRadians_angle" xml:space="preserve">
    <value>The angle in degrees.</value>
  </data>
  <data name="Math_GetRadians_ReturnValue" xml:space="preserve">
    <value>The converted angle in radians.</value>
  </data>
  <data name="Math_GetRandomNumber" xml:space="preserve">
    <value>Gets a random number between 1 and the specified maxNumber (inclusive).</value>
  </data>
  <data name="Math_GetRandomNumber_maxNumber" xml:space="preserve">
    <value>The maximum number for the requested random value.</value>
  </data>
  <data name="Math_GetRandomNumber_ReturnValue" xml:space="preserve">
    <value>A Random number that is less than or equal to the specified max.</value>
  </data>
  <data name="Math_Log" xml:space="preserve">
    <value>Gets the logarithm (base 10) value of the given number.</value>
  </data>
  <data name="Math_Log_number" xml:space="preserve">
    <value>The number whose logarithm value is required</value>
  </data>
  <data name="Math_Log_ReturnValue" xml:space="preserve">
    <value>The log value of the given number</value>
  </data>
  <data name="Math_Max" xml:space="preserve">
    <value>Compares two numbers and returns the greater of the two.</value>
  </data>
  <data name="Math_Max_number1" xml:space="preserve">
    <value>The first of the two numbers to compare.</value>
  </data>
  <data name="Math_Max_number2" xml:space="preserve">
    <value>The second of the two numbers to compare.</value>
  </data>
  <data name="Math_Max_ReturnValue" xml:space="preserve">
    <value>The greater value of the two numbers.</value>
  </data>
  <data name="Math_Min" xml:space="preserve">
    <value>Compares two numbers and returns the smaller of the two.</value>
  </data>
  <data name="Math_Min_number1" xml:space="preserve">
    <value>The first of the two numbers to compare.</value>
  </data>
  <data name="Math_Min_number2" xml:space="preserve">
    <value>The second of the two numbers to compare.</value>
  </data>
  <data name="Math_Min_ReturnValue" xml:space="preserve">
    <value>The smaller value of the two numbers.</value>
  </data>
  <data name="Math_NaturalLog" xml:space="preserve">
    <value>Gets the natural logarithm value of the given number.</value>
  </data>
  <data name="Math_NaturalLog_number" xml:space="preserve">
    <value>The number whose natural logarithm value is required.</value>
  </data>
  <data name="Math_NaturalLog_ReturnValue" xml:space="preserve">
    <value>The natural log value of the given number.</value>
  </data>
  <data name="Math_Power" xml:space="preserve">
    <value>Raises the base number to the specified power.</value>
  </data>
  <data name="Math_Power_baseNumber" xml:space="preserve">
    <value>The number to be raised to the exponent power.</value>
  </data>
  <data name="Math_Power_exponent" xml:space="preserve">
    <value>The power to raise the base number.</value>
  </data>
  <data name="Math_Power_ReturnValue" xml:space="preserve">
    <value>The base number raised to the specified exponent.</value>
  </data>
  <data name="Math_Remainder" xml:space="preserve">
    <value>Divides the first number by the second and returns the remainder.</value>
  </data>
  <data name="Math_Remainder_dividend" xml:space="preserve">
    <value>The number to divide.</value>
  </data>
  <data name="Math_Remainder_divisor" xml:space="preserve">
    <value>The number that divides.</value>
  </data>
  <data name="Math_Remainder_ReturnValue" xml:space="preserve">
    <value>The remainder after the division.</value>
  </data>
  <data name="Math_Round" xml:space="preserve">
    <value>Rounds a given number to the nearest integer. For example 32.233 will be rounded to 32.0 while 32.566 will be rounded to 33.</value>
  </data>
  <data name="Math_Round_number" xml:space="preserve">
    <value>The number whose approximation is required.</value>
  </data>
  <data name="Math_Round_ReturnValue" xml:space="preserve">
    <value>The rounded value of the given number.</value>
  </data>
  <data name="Math_Sin" xml:space="preserve">
    <value>Gets the sine of the given angle in radians.</value>
  </data>
  <data name="Math_Sin_angle" xml:space="preserve">
    <value>The angle whose sine is needed (in radians)</value>
  </data>
  <data name="Math_Sin_ReturnValue" xml:space="preserve">
    <value>The sine of the given angle</value>
  </data>
  <data name="Math_SquareRoot" xml:space="preserve">
    <value>Gets the square root of a given number.</value>
  </data>
  <data name="Math_SquareRoot_number" xml:space="preserve">
    <value>The number whose square root value is needed.</value>
  </data>
  <data name="Math_SquareRoot_ReturnValue" xml:space="preserve">
    <value>The square root value of the given number.</value>
  </data>
  <data name="Math_Tan" xml:space="preserve">
    <value>Gets the tangent of the given angle in radians.</value>
  </data>
  <data name="Math_Tan_angle" xml:space="preserve">
    <value>The angle whose tangent is needed (in radians).</value>
  </data>
  <data name="Math_Tan_ReturnValue" xml:space="preserve">
    <value>The tangent of the given angle.</value>
  </data>
  <data name="Math_Pi" xml:space="preserve">
    <value>Gets the value of Pi</value>
  </data>
  <data name="Mouse" xml:space="preserve">
    <value>The mouse class provides accessors to get or set the mouse related properties, like the cursor position, pointer, etc.</value>
  </data>
  <data name="Mouse_HideCursor" xml:space="preserve">
    <value>Hides the mouse cursor on the screen.</value>
  </data>
  <data name="Mouse_ShowCursor" xml:space="preserve">
    <value>Shows the mouse cursors on the screen.</value>
  </data>
  <data name="Mouse_IsLeftButtonDown" xml:space="preserve">
    <value>Gets whether or not the left button is pressed.</value>
  </data>
  <data name="Mouse_IsRightButtonDown" xml:space="preserve">
    <value>Gets whether or not the right button is pressed.</value>
  </data>
  <data name="Mouse_MouseX" xml:space="preserve">
    <value>Gets or sets the mouse cursor's x co-ordinate.</value>
  </data>
  <data name="Mouse_MouseY" xml:space="preserve">
    <value>Gets or sets the mouse cursor's y co-ordinate.</value>
  </data>
  <data name="Network" xml:space="preserve">
    <value>This helper class provides network access methods</value>
  </data>
  <data name="Network_DownloadFile" xml:space="preserve">
    <value>Downloads a file from the network to a local temporary file.</value>
  </data>
  <data name="Network_DownloadFile_url" xml:space="preserve">
    <value>The URL of the file on the network.</value>
  </data>
  <data name="Network_DownloadFile_ReturnValue" xml:space="preserve">
    <value>A local file name that the remote file was downloaded as.</value>
  </data>
  <data name="Network_GetWebPageContents" xml:space="preserve">
    <value>Gets the contents of a specified web page.</value>
  </data>
  <data name="Network_GetWebPageContents_url" xml:space="preserve">
    <value>The URL of the web page</value>
  </data>
  <data name="Network_GetWebPageContents_ReturnValue" xml:space="preserve">
    <value>The contents of the specified web page.</value>
  </data>
  <data name="Program" xml:space="preserve">
    <value>The Program class provides helpers to control the program execution.</value>
  </data>
  <data name="Program_Delay" xml:space="preserve">
    <value>Delays program execution by the specified amount of MilliSeconds.</value>
  </data>
  <data name="Program_Delay_milliSeconds" xml:space="preserve">
    <value>The amount of delay.</value>
  </data>
  <data name="Program_End" xml:space="preserve">
    <value>Ends the program.</value>
  </data>
  <data name="Program_GetArgument" xml:space="preserve">
    <value>Returns the specified argument passed to this program.</value>
  </data>
  <data name="Program_GetArgument_index" xml:space="preserve">
    <value>Index of the argument.</value>
  </data>
  <data name="Program_GetArgument_ReturnValue" xml:space="preserve">
    <value>The command-line argument at the specified index.</value>
  </data>
  <data name="Program_ArgumentCount" xml:space="preserve">
    <value>Gets the number of command-line arguments passed to this program.</value>
  </data>
  <data name="Program_Directory" xml:space="preserve">
    <value>Gets the executing program's directory.</value>
  </data>
  <data name="Shapes" xml:space="preserve">
    <value>The Shape object allows you to add, move and rotate shapes to the Graphics window.</value>
  </data>
  <data name="Shapes_AddEllipse" xml:space="preserve">
    <value>Adds an ellipse shape with the specified width and height.</value>
  </data>
  <data name="Shapes_AddEllipse_width" xml:space="preserve">
    <value>The width of the ellipse shape.</value>
  </data>
  <data name="Shapes_AddEllipse_height" xml:space="preserve">
    <value>The height of the ellipse shape.</value>
  </data>
  <data name="Shapes_AddEllipse_ReturnValue" xml:space="preserve">
    <value>The Ellipse shape that was just added to the Graphics Window.</value>
  </data>
  <data name="Shapes_AddImage" xml:space="preserve">
    <value>Adds an image as a shape that can be moved, animated or rotated.</value>
  </data>
  <data name="Shapes_AddImage_imageName" xml:space="preserve">
    <value>The name of the image to draw.</value>
  </data>
  <data name="Shapes_AddImage_ReturnValue" xml:space="preserve">
    <value>The image that was just added to the Graphics Window.</value>
  </data>
  <data name="Shapes_AddLine" xml:space="preserve">
    <value>Adds a line between the specified points.</value>
  </data>
  <data name="Shapes_AddLine_x1" xml:space="preserve">
    <value>The x co-ordinate of the first point.</value>
  </data>
  <data name="Shapes_AddLine_y1" xml:space="preserve">
    <value>The y co-ordinate of the first point.</value>
  </data>
  <data name="Shapes_AddLine_x2" xml:space="preserve">
    <value>The x co-ordinate of the second point.</value>
  </data>
  <data name="Shapes_AddLine_y2" xml:space="preserve">
    <value>The y co-ordinate of the second point.</value>
  </data>
  <data name="Shapes_AddLine_ReturnValue" xml:space="preserve">
    <value>The line that was just added to the Graphics Window.</value>
  </data>
  <data name="Shapes_AddRectangle" xml:space="preserve">
    <value>Adds a rectangle shape with the specified width and height.</value>
  </data>
  <data name="Shapes_AddRectangle_width" xml:space="preserve">
    <value>The width of the rectangle shape.</value>
  </data>
  <data name="Shapes_AddRectangle_height" xml:space="preserve">
    <value>The height of the rectangle shape.</value>
  </data>
  <data name="Shapes_AddRectangle_ReturnValue" xml:space="preserve">
    <value>The Rectangle shape that was just added to the Graphics Window.</value>
  </data>
  <data name="Shapes_AddText" xml:space="preserve">
    <value>Adds some text as a shape that can be moved, animated or rotated.</value>
  </data>
  <data name="Shapes_AddText_text" xml:space="preserve">
    <value>The text to add.</value>
  </data>
  <data name="Shapes_AddText_ReturnValue" xml:space="preserve">
    <value>The text shape that was just added to the Graphics Window.</value>
  </data>
  <data name="Shapes_AddTriangle" xml:space="preserve">
    <value>Adds a triangle shape represented by the specified points.</value>
  </data>
  <data name="Shapes_AddTriangle_x1" xml:space="preserve">
    <value>The x co-ordinate of the first point.</value>
  </data>
  <data name="Shapes_AddTriangle_y1" xml:space="preserve">
    <value>The y co-ordinate of the first point.</value>
  </data>
  <data name="Shapes_AddTriangle_x2" xml:space="preserve">
    <value>The x co-ordinate of the second point.</value>
  </data>
  <data name="Shapes_AddTriangle_y2" xml:space="preserve">
    <value>The y co-ordinate of the second point.</value>
  </data>
  <data name="Shapes_AddTriangle_x3" xml:space="preserve">
    <value>The x co-ordinate of the third point.</value>
  </data>
  <data name="Shapes_AddTriangle_y3" xml:space="preserve">
    <value>The y co-ordinate of the third point.</value>
  </data>
  <data name="Shapes_AddTriangle_ReturnValue" xml:space="preserve">
    <value>The Triangle shape that was just added to the Graphics Window.</value>
  </data>
  <data name="Shapes_Animate" xml:space="preserve">
    <value>Animates a shape with the specified name to a new position.</value>
  </data>
  <data name="Shapes_Animate_shapeName" xml:space="preserve">
    <value>The name of the shape to move.</value>
  </data>
  <data name="Shapes_Animate_x" xml:space="preserve">
    <value>The x co-ordinate of the new position.</value>
  </data>
  <data name="Shapes_Animate_y" xml:space="preserve">
    <value>The y co-ordinate of the new position.</value>
  </data>
  <data name="Shapes_Animate_duration" xml:space="preserve">
    <value>The time for the animation, in milliseconds.</value>
  </data>
  <data name="Shapes_GetLeft" xml:space="preserve">
    <value>Gets the left co-ordinate of the specified shape.</value>
  </data>
  <data name="Shapes_GetLeft_shapeName" xml:space="preserve">
    <value>The name of the shape.</value>
  </data>
  <data name="Shapes_GetLeft_ReturnValue" xml:space="preserve">
    <value>The left co-ordinate of the shape.</value>
  </data>
  <data name="Shapes_GetOpacity" xml:space="preserve">
    <value>Gets the opacity of a shape.</value>
  </data>
  <data name="Shapes_GetOpacity_shapeName" xml:space="preserve">
    <value>The name of the shape.</value>
  </data>
  <data name="Shapes_GetOpacity_ReturnValue" xml:space="preserve">
    <value>The opacity of the object as a value between 0 and 100. 0 is completely transparent and 100 is completely opaque.</value>
  </data>
  <data name="Shapes_GetTop" xml:space="preserve">
    <value>Gets the top co-ordinate of the specified shape.</value>
  </data>
  <data name="Shapes_GetTop_shapeName" xml:space="preserve">
    <value>The name of the shape.</value>
  </data>
  <data name="Shapes_GetTop_ReturnValue" xml:space="preserve">
    <value>The top co-ordinate of the shape.</value>
  </data>
  <data name="Shapes_HideShape" xml:space="preserve">
    <value>Hides an already added shape.</value>
  </data>
  <data name="Shapes_HideShape_shapeName" xml:space="preserve">
    <value>The name of the shape.</value>
  </data>
  <data name="Shapes_Move" xml:space="preserve">
    <value>Moves the shape with the specified name to a new position.</value>
  </data>
  <data name="Shapes_Move_shapeName" xml:space="preserve">
    <value>The name of the shape to move.</value>
  </data>
  <data name="Shapes_Move_x" xml:space="preserve">
    <value>The x co-ordinate of the new position.</value>
  </data>
  <data name="Shapes_Move_y" xml:space="preserve">
    <value>The y co-ordinate of the new position.</value>
  </data>
  <data name="Shapes_Remove" xml:space="preserve">
    <value>Removes a shape from the Graphics Window.</value>
  </data>
  <data name="Shapes_Remove_shapeName" xml:space="preserve">
    <value>The name of the shape that needs to be removed.</value>
  </data>
  <data name="Shapes_Rotate" xml:space="preserve">
    <value>Rotates the shape with the specified name to the specified angle.</value>
  </data>
  <data name="Shapes_Rotate_shapeName" xml:space="preserve">
    <value>The name of the shape to rotate.</value>
  </data>
  <data name="Shapes_Rotate_angle" xml:space="preserve">
    <value>The angle to rotate the shape.</value>
  </data>
  <data name="Shapes_SetOpacity" xml:space="preserve">
    <value>Sets how opaque a shape should render.</value>
  </data>
  <data name="Shapes_SetOpacity_shapeName" xml:space="preserve">
    <value>The name of the shape.</value>
  </data>
  <data name="Shapes_SetOpacity_level" xml:space="preserve">
    <value>The opacity level ranging from 0 to 100. 0 is completely transparent and 100 is completely opaque.</value>
  </data>
  <data name="Shapes_SetText" xml:space="preserve">
    <value>Sets the text of a text shape.</value>
  </data>
  <data name="Shapes_SetText_shapeName" xml:space="preserve">
    <value>The name of the text shape.</value>
  </data>
  <data name="Shapes_SetText_text" xml:space="preserve">
    <value>The new text value to set.</value>
  </data>
  <data name="Shapes_ShowShape" xml:space="preserve">
    <value>Shows a previously hidden shape.</value>
  </data>
  <data name="Shapes_ShowShape_shapeName" xml:space="preserve">
    <value>The name of the shape.</value>
  </data>
  <data name="Shapes_Zoom" xml:space="preserve">
    <value>Scales the shape using the specified zoom levels. Minimum is 0.1 and maximum is 20.</value>
  </data>
  <data name="Shapes_Zoom_shapeName" xml:space="preserve">
    <value>The name of the shape to zoom.</value>
  </data>
  <data name="Shapes_Zoom_scaleX" xml:space="preserve">
    <value>The x-axis zoom level.</value>
  </data>
  <data name="Shapes_Zoom_scaleY" xml:space="preserve">
    <value>The y-axis zoom level.</value>
  </data>
  <data name="Sound" xml:space="preserve">
    <value>The Sound object provides operations that allow the playback of sounds. Some sample sounds are provided along with the library.</value>
  </data>
  <data name="Sound_Pause" xml:space="preserve">
    <value>Pauses playback of an audio file. If the file was not already playing, this operation will not do anything.</value>
  </data>
  <data name="Sound_Pause_filePath" xml:space="preserve">
    <value>The path for the audio file. This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).</value>
  </data>
  <data name="Sound_Play" xml:space="preserve">
    <value>Plays an audio file. This could be an mp3 or wav or wma file. Other file formats may or may not play depending on the audio codecs installed on the user's computer. If the file was already paused, this operation will resume from the position where the playback was paused.</value>
  </data>
  <data name="Sound_Play_filePath" xml:space="preserve">
    <value>The path for the audio file. This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).</value>
  </data>
  <data name="Sound_PlayAndWait" xml:space="preserve">
    <value>Plays an audio file and waits until it is finished playing. This could be an mp3 or wav or wma file. Other file formats may or may not play depending on the audio codecs installed on the user's computer. If the file was already paused, this operation will resume from the position where the playback was paused.</value>
  </data>
  <data name="Sound_PlayAndWait_filePath" xml:space="preserve">
    <value>The path for the audio file. This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).</value>
  </data>
  <data name="Sound_PlayBellRing" xml:space="preserve">
    <value>Plays the Bell Ring Sound.</value>
  </data>
  <data name="Sound_PlayBellRingAndWait" xml:space="preserve">
    <value>Plays the Bell Ring Sound and waits for it to finish.</value>
  </data>
  <data name="Sound_PlayChime" xml:space="preserve">
    <value>Plays the Chime Sound.</value>
  </data>
  <data name="Sound_PlayChimeAndWait" xml:space="preserve">
    <value>Plays the Chime Sound and waits for it to finish.</value>
  </data>
  <data name="Sound_PlayChimes" xml:space="preserve">
    <value>Plays the Chimes Sound.</value>
  </data>
  <data name="Sound_PlayChimesAndWait" xml:space="preserve">
    <value>Plays the Chimes Sound and waits for it to finish.</value>
  </data>
  <data name="Sound_PlayClick" xml:space="preserve">
    <value>Plays the Click Sound.</value>
  </data>
  <data name="Sound_PlayClickAndWait" xml:space="preserve">
    <value>Plays the Click Sound and waits for it to finish.</value>
  </data>
  <data name="Sound_PlayMusic" xml:space="preserve">
    <value>Plays musical notes.</value>
  </data>
  <data name="Sound_PlayMusic_notes" xml:space="preserve">
    <value>A set of musical notes to play. The format is a subset of the Music Macro Language supported by QBasic.</value>
  </data>
  <data name="Sound_Stop" xml:space="preserve">
    <value>Stops playback of an audio file. If the file was not already playing, this operation will not do anything.</value>
  </data>
  <data name="Sound_Stop_filePath" xml:space="preserve">
    <value>The path for the audio file. This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).</value>
  </data>
  <data name="Stack" xml:space="preserve">
    <value>This object provides a way of storing values just like stacking up a plate. You can push a value to the top of the stack and pop it off. You can only pop the values one by one off the stack and the last pushed value will be the first one to pop out.</value>
  </data>
  <data name="Stack_GetCount" xml:space="preserve">
    <value>Gets the count of items in the specified stack.</value>
  </data>
  <data name="Stack_GetCount_stackName" xml:space="preserve">
    <value>The name of the stack.</value>
  </data>
  <data name="Stack_GetCount_ReturnValue" xml:space="preserve">
    <value>The number of items in the specified stack.</value>
  </data>
  <data name="Stack_PopValue" xml:space="preserve">
    <value>Pops the value from the specified stack.</value>
  </data>
  <data name="Stack_PopValue_stackName" xml:space="preserve">
    <value>The name of the stack.</value>
  </data>
  <data name="Stack_PopValue_ReturnValue" xml:space="preserve">
    <value>The value from the stack.</value>
  </data>
  <data name="Stack_PushValue" xml:space="preserve">
    <value>Pushes a value to the specified stack.</value>
  </data>
  <data name="Stack_PushValue_stackName" xml:space="preserve">
    <value>The name of the stack.</value>
  </data>
  <data name="Stack_PushValue_value" xml:space="preserve">
    <value>The value to push.</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>The Text object provides helpful operations for working with Text.</value>
  </data>
  <data name="Text_Append" xml:space="preserve">
    <value>Appends two text inputs and returns the result as another text. This operation is particularly useful when dealing with unknown text in variables which could accidentally be treated as numbers and get added, instead of getting appended.</value>
  </data>
  <data name="Text_Append_text1" xml:space="preserve">
    <value>First part of the text to be appended.</value>
  </data>
  <data name="Text_Append_text2" xml:space="preserve">
    <value>Second part of the text to be appended.</value>
  </data>
  <data name="Text_Append_ReturnValue" xml:space="preserve">
    <value>The appended text containing both the specified parts.</value>
  </data>
  <data name="Text_ConvertToLowerCase" xml:space="preserve">
    <value>Converts the given text to lower case.</value>
  </data>
  <data name="Text_ConvertToLowerCase_text" xml:space="preserve">
    <value>The text to convert to lower case.</value>
  </data>
  <data name="Text_ConvertToLowerCase_ReturnValue" xml:space="preserve">
    <value>The lower case version of the given text.</value>
  </data>
  <data name="Text_ConvertToUpperCase" xml:space="preserve">
    <value>Converts the given text to upper case.</value>
  </data>
  <data name="Text_ConvertToUpperCase_text" xml:space="preserve">
    <value>The text to convert to upper case.</value>
  </data>
  <data name="Text_ConvertToUpperCase_ReturnValue" xml:space="preserve">
    <value>The upper case version of the given text.</value>
  </data>
  <data name="Text_EndsWith" xml:space="preserve">
    <value>Gets whether or not a given text ends with the specified subText.</value>
  </data>
  <data name="Text_EndsWith_text" xml:space="preserve">
    <value>The larger text to search within.</value>
  </data>
  <data name="Text_EndsWith_subText" xml:space="preserve">
    <value>The sub-text to search for.</value>
  </data>
  <data name="Text_EndsWith_ReturnValue" xml:space="preserve">
    <value>True if the subtext was found at the end of the given text.</value>
  </data>
  <data name="Text_GetCharacter" xml:space="preserve">
    <value>Given the Unicode character code, gets the corresponding character, which can then be used with regular text.</value>
  </data>
  <data name="Text_GetCharacter_characterCode" xml:space="preserve">
    <value>The character code (Unicode based) for the required character.</value>
  </data>
  <data name="Text_GetCharacter_ReturnValue" xml:space="preserve">
    <value>A Unicode character that corresponds to the code specified.</value>
  </data>
  <data name="Text_GetCharacterCode" xml:space="preserve">
    <value>Given a Unicode character, gets the corresponding character code.</value>
  </data>
  <data name="Text_GetCharacterCode_character" xml:space="preserve">
    <value>The character whose code is requested.</value>
  </data>
  <data name="Text_GetCharacterCode_ReturnValue" xml:space="preserve">
    <value>A Unicode based code that corresponds to the character specified.</value>
  </data>
  <data name="Text_GetIndexOf" xml:space="preserve">
    <value>Finds the position where a sub-text appears in the specified text.</value>
  </data>
  <data name="Text_GetIndexOf_text" xml:space="preserve">
    <value>The text to search in.</value>
  </data>
  <data name="Text_GetIndexOf_subText" xml:space="preserve">
    <value>The text to search for.</value>
  </data>
  <data name="Text_GetIndexOf_ReturnValue" xml:space="preserve">
    <value>The position at which the sub-text appears in the specified text. If the text doesn't appear, it returns 0.</value>
  </data>
  <data name="Text_GetLength" xml:space="preserve">
    <value>Gets the length of the given text.</value>
  </data>
  <data name="Text_GetLength_text" xml:space="preserve">
    <value>The text whose length is needed.</value>
  </data>
  <data name="Text_GetLength_ReturnValue" xml:space="preserve">
    <value>The length of the given text.</value>
  </data>
  <data name="Text_GetSubText" xml:space="preserve">
    <value>Gets a sub-text from the given text.</value>
  </data>
  <data name="Text_GetSubText_text" xml:space="preserve">
    <value>The text to derive the sub-text from.</value>
  </data>
  <data name="Text_GetSubText_start" xml:space="preserve">
    <value>Specifies where to start from.</value>
  </data>
  <data name="Text_GetSubText_length" xml:space="preserve">
    <value>Specifies the length of the sub text.</value>
  </data>
  <data name="Text_GetSubText_ReturnValue" xml:space="preserve">
    <value>The requested sub-text</value>
  </data>
  <data name="Text_GetSubTextToEnd" xml:space="preserve">
    <value>Gets a sub-text from the given text from a specified position to the end.</value>
  </data>
  <data name="Text_GetSubTextToEnd_text" xml:space="preserve">
    <value>The text to derive the sub-text from.</value>
  </data>
  <data name="Text_GetSubTextToEnd_start" xml:space="preserve">
    <value>Specifies where to start from.</value>
  </data>
  <data name="Text_GetSubTextToEnd_ReturnValue" xml:space="preserve">
    <value>The requested sub-text.</value>
  </data>
  <data name="Text_IsSubText" xml:space="preserve">
    <value>Gets whether or not a given subText is a subset of the larger text.</value>
  </data>
  <data name="Text_IsSubText_text" xml:space="preserve">
    <value>The larger text within which the sub-text will be searched.</value>
  </data>
  <data name="Text_IsSubText_subText" xml:space="preserve">
    <value>The sub-text to search for.</value>
  </data>
  <data name="Text_IsSubText_ReturnValue" xml:space="preserve">
    <value>True if the subtext was found within the given text.</value>
  </data>
  <data name="Text_StartsWith" xml:space="preserve">
    <value>Gets whether or not a given text starts with the specified subText.</value>
  </data>
  <data name="Text_StartsWith_text" xml:space="preserve">
    <value>The larger text to search within.</value>
  </data>
  <data name="Text_StartsWith_subText" xml:space="preserve">
    <value>The sub-text to search for.</value>
  </data>
  <data name="Text_StartsWith_ReturnValue" xml:space="preserve">
    <value>True if the subtext was found at the start of the given text.</value>
  </data>
  <data name="TextWindow" xml:space="preserve">
    <value>The TextWindow provides text-related input and output functionalities. For example using this class, it is possible to write or read some text or number to and from the text-based text window.</value>
  </data>
  <data name="TextWindow_Clear" xml:space="preserve">
    <value>Clears the TextWindow.</value>
  </data>
  <data name="TextWindow_Hide" xml:space="preserve">
    <value>Hides the text window. Content is perserved when the window is shown again.</value>
  </data>
  <data name="TextWindow_Pause" xml:space="preserve">
    <value>Waits for user input before returning.</value>
  </data>
  <data name="TextWindow_PauseIfVisible" xml:space="preserve">
    <value>Waits for user input only when the TextWindow is already open.</value>
  </data>
  <data name="TextWindow_PauseWithoutMessage" xml:space="preserve">
    <value>Waits for user input before returning.</value>
  </data>
  <data name="TextWindow_Read" xml:space="preserve">
    <value>Reads a line of text from the text window. This function will not return until the user hits ENTER.</value>
  </data>
  <data name="TextWindow_Read_ReturnValue" xml:space="preserve">
    <value>The text that was read from the text window</value>
  </data>
  <data name="TextWindow_ReadNumber" xml:space="preserve">
    <value>Reads a number from the text window. This function will not return until the user hits ENTER.</value>
  </data>
  <data name="TextWindow_ReadNumber_ReturnValue" xml:space="preserve">
    <value>The number that was read from the text window</value>
  </data>
  <data name="TextWindow_Show" xml:space="preserve">
    <value>Shows the Text window to enable interactions with it.</value>
  </data>
  <data name="TextWindow_Write" xml:space="preserve">
    <value>Writes text or number to the text window. Unlike WriteLine, this will not append a new line character, which means, anything written to the text window after this call will be on the same line.</value>
  </data>
  <data name="TextWindow_Write_data" xml:space="preserve">
    <value>The text or number to write to the text window</value>
  </data>
  <data name="TextWindow_WriteLine" xml:space="preserve">
    <value>Writes text or number to the text window. A new line character will be appended to the output, so that the next time something is written to the text window, it will go in a new line.</value>
  </data>
  <data name="TextWindow_WriteLine_data" xml:space="preserve">
    <value>The text or number to write to the text window.</value>
  </data>
  <data name="TextWindow_BackgroundColor" xml:space="preserve">
    <value>Gets or sets the background color of the text to be output in the text window.</value>
  </data>
  <data name="TextWindow_CursorLeft" xml:space="preserve">
    <value>Gets or sets the cursor's column position on the text window.</value>
  </data>
  <data name="TextWindow_CursorTop" xml:space="preserve">
    <value>Gets or sets the cursor's row position on the text window.</value>
  </data>
  <data name="TextWindow_ForegroundColor" xml:space="preserve">
    <value>Gets or sets the foreground color of the text to be output in the text window.</value>
  </data>
  <data name="TextWindow_Left" xml:space="preserve">
    <value>Gets or sets the Left position of the Text Window.</value>
  </data>
  <data name="TextWindow_Title" xml:space="preserve">
    <value>Gets or sets the Title for the text window.</value>
  </data>
  <data name="TextWindow_Top" xml:space="preserve">
    <value>Gets or sets the Top position of the Text Window.</value>
  </data>
  <data name="Timer" xml:space="preserve">
    <value>The Timer object provides an easy way for doing something repeatedly with a constant interval between.</value>
  </data>
  <data name="Timer_Pause" xml:space="preserve">
    <value>Pauses the timer. Tick events will not be raised.</value>
  </data>
  <data name="Timer_Resume" xml:space="preserve">
    <value>Resumes the timer from a paused state. Tick events will now be raised.</value>
  </data>
  <data name="Timer_Interval" xml:space="preserve">
    <value>Gets or sets the interval (in milliseconds) specifying how often the timer should raise the Tick event. This value can range from 10 to 100000000</value>
  </data>
  <data name="Timer_Tick" xml:space="preserve">
    <value>Raises an event when the timer ticks.</value>
  </data>
  <data name="Turtle" xml:space="preserve">
    <value>The Turtle provides Logo-like functionality to draw shapes by manipulating the properties of a pen and drawing primitives.</value>
  </data>
  <data name="Turtle_Hide" xml:space="preserve">
    <value>Hides the Turtle and disables interactions with it.</value>
  </data>
  <data name="Turtle_Move" xml:space="preserve">
    <value>Moves the turtle to a specified distance. If the pen is down, it will draw a line as it moves.</value>
  </data>
  <data name="Turtle_Move_distance" xml:space="preserve">
    <value>The distance to move the turtle.</value>
  </data>
  <data name="Turtle_MoveTo" xml:space="preserve">
    <value>Turns and moves the turtle to the specified location. If the pen is down, it will draw a line as it moves.</value>
  </data>
  <data name="Turtle_MoveTo_x" xml:space="preserve">
    <value>The x co-ordinate of the destination point.</value>
  </data>
  <data name="Turtle_MoveTo_y" xml:space="preserve">
    <value>The y co-ordinate of the destination point.</value>
  </data>
  <data name="Turtle_PenDown" xml:space="preserve">
    <value>Sets the pen down to enable the turtle to draw as it moves.</value>
  </data>
  <data name="Turtle_PenUp" xml:space="preserve">
    <value>Lifts the pen up to stop drawing as the turtle moves.</value>
  </data>
  <data name="Turtle_Show" xml:space="preserve">
    <value>Shows the Turtle to enable interactions with it.</value>
  </data>
  <data name="Turtle_Turn" xml:space="preserve">
    <value>Turns the turtle by the specified angle. Angle is in degrees and can be either positive or negative. If the angle is positive, the turtle turns to its right. If it is negative, the turtle turns to its left.</value>
  </data>
  <data name="Turtle_Turn_angle" xml:space="preserve">
    <value>The angle to turn the turtle.</value>
  </data>
  <data name="Turtle_TurnLeft" xml:space="preserve">
    <value>Turns the turtle 90 degrees to the left.</value>
  </data>
  <data name="Turtle_TurnRight" xml:space="preserve">
    <value>Turns the turtle 90 degrees to the right.</value>
  </data>
  <data name="Turtle_Angle" xml:space="preserve">
    <value>Gets or sets the current angle of the turtle. While setting, this will turn the turtle instantly to the new angle.</value>
  </data>
  <data name="Turtle_Speed" xml:space="preserve">
    <value>Specifies how fast the turtle should move. Valid values are 1 to 10. If Speed is set to 10, the turtle moves and rotates instantly.</value>
  </data>
  <data name="Turtle_X" xml:space="preserve">
    <value>Gets or sets the X location of the Turtle. While setting, this will move the turtle instantly to the new location.</value>
  </data>
  <data name="Turtle_Y" xml:space="preserve">
    <value>Gets or sets the Y location of the Turtle. While setting, this will move the turtle instantly to the new location.</value>
  </data>
  <data name="Program_Pause" xml:space="preserve">
    <value>Pauses the program when debugging to inspect variables.</value>
  </data>
</root>