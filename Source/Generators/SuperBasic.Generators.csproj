<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <OutputType>Exe</OutputType>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="$(RootDirectory)\Source\Utilities\SuperBasic.Utilities.csproj" />
  </ItemGroup>

  <ItemGroup>
    <!-- Command line parser -->
    <PackageReference Include="CommandLineParser" Version="2.3.0" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="**\*.xml" />
  </ItemGroup>

  <ItemGroup>
    <_Commands Include="generate-token-kinds">
      <InputFile>$(RootDirectory)\Source\Generators\Scanning\TokenKinds.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Scanning\TokenKind.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-diagnostic-code">
      <InputFile>$(RootDirectory)\Source\Generators\Diagnostics\Diagnostics.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Diagnostics\DiagnosticCode.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-diagnostic-bag">
      <InputFile>$(RootDirectory)\Source\Generators\Diagnostics\Diagnostics.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Diagnostics\DiagnosticBag.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-syntax-nodes">
      <InputFile>$(RootDirectory)\Source\Generators\Parsing\SyntaxNodes.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Parsing\SyntaxNodes.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-bound-nodes">
      <InputFile>$(RootDirectory)\Source\Generators\Binding\BoundNodes.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Binding\BoundNodes.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-libraries">
      <InputFile>$(RootDirectory)\Source\Generators\Libraries\Libraries.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Runtime\Libraries\Libraries.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-library-interfaces">
      <InputFile>$(RootDirectory)\Source\Generators\Libraries\Libraries.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Runtime\Libraries\Libraries.Interfaces.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-library-interfaces">
      <InputFile>$(RootDirectory)\Source\Generators\Libraries\Libraries.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Compiler\Runtime\Libraries\Libraries.Interfaces.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-logging-test-libraries">
      <InputFile>$(RootDirectory)\Source\Generators\Libraries\Libraries.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Tests\LoggingTestLibraries.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-cs-interop-callee">
      <InputFile>$(RootDirectory)\Source\Generators\CSInterop\CSInteropTypes.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Editor\Interop\CSInteropTypes.Generated.cs</OutputFile>
    </_Commands>
    <_Commands Include="generate-cs-interop-caller">
      <InputFile>$(RootDirectory)\Source\Generators\CSInterop\CSInteropTypes.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Client\Interop\CSInteropTypes.Generated.ts</OutputFile>
    </_Commands>
    <_Commands Include="generate-js-interop-callee">
      <InputFile>$(RootDirectory)\Source\Generators\JSInterop\JSInteropTypes.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Client\Interop\JSInteropTypes.Generated.ts</OutputFile>
    </_Commands>
    <_Commands Include="generate-js-interop-caller">
      <InputFile>$(RootDirectory)\Source\Generators\JSInterop\JSInteropTypes.xml</InputFile>
      <OutputFile>$(RootDirectory)\Source\Editor\Interop\JSInteropTypes.Generated.cs</OutputFile>
    </_Commands>
  </ItemGroup>

  <Target Name="RunGenerators" AfterTargets="Build" Outputs="%(_Commands.Identity)">
    <Exec ConsoleToMsBuild="true" Command="dotnet $(OutputPath)$(ProjectName).dll --task %(_Commands.Identity) --input %(_Commands.InputFile) --output %(_Commands.OutputFile)" />
  </Target>

</Project>