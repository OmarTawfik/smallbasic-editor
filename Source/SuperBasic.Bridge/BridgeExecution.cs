// <copyright file="BridgeExecution.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Bridge
{
    using System.Diagnostics;
    using System.IO;
    using Newtonsoft.Json;
    using SuperBasic.Utilities;
    using SuperBasic.Utilities.Bridge;

    internal interface ITestBridge
    {
        void TestMethod1(string val1);

        Bean1 TestMethod2();

        string TestMethod3();

        string TestMethod4(Bean1 val4);
    }

    internal static class BridgeExecution
    {
        private static readonly ITestBridge Test = new TestBridge();

        public static void Run(string[] args)
        {
            Debug.Assert(args.Length >= 2, "Only intended for bridge calls");

            string type = args[0];
            string method = args[1];
            string filePath = args.Length > 2 ? args[2] : null;

            switch (type)
            {
                case "Test":
                {
                    switch (method)
                    {
                        case "TestMethod1":
                        {
                            string input = JsonConvert.DeserializeObject<string>(File.ReadAllText(filePath));
                            Test.TestMethod1(input);
                            break;
                        }

                        case "TestMethod2":
                        {
                            Bean1 output = Test.TestMethod2();
                            File.WriteAllText(filePath, JsonConvert.SerializeObject(output));
                            break;
                        }

                        case "TestMethod3":
                        {
                            string output = Test.TestMethod3();
                            File.WriteAllText(filePath, JsonConvert.SerializeObject(output));
                            break;
                        }

                        case "TestMethod4":
                        {
                            Bean1 input = JsonConvert.DeserializeObject<Bean1>(File.ReadAllText(filePath));
                            string output = Test.TestMethod4(input);
                            File.WriteAllText(filePath, JsonConvert.SerializeObject(output));
                            break;
                        }

                        default:
                        {
                            throw ExceptionUtilities.UnexpectedValue(method);
                        }
                    }

                    break;
                }

                default:
                {
                    throw ExceptionUtilities.UnexpectedValue(type);
                }
            }
        }
    }
}
