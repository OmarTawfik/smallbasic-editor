// <copyright file="JSInteropTypes.Generated.cs" company="2018 Omar Tawfik">
// Copyright (c) 2018 Omar Tawfik. All rights reserved. Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SuperBasic.Editor.Interop
{
    using System.Threading.Tasks;
    using Microsoft.JSInterop;

    internal static class JSInterop
    {
        public static class Shapes
        {
            public static async Task<bool> Initialize(string containerId)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.initialize", containerId);

            public static async Task<string> AddButton(string caption, decimal left, decimal top)
                => await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Shapes.addButton", caption, left, top);

            public static async Task<string> AddTextBox(bool isMultiLine, decimal left, decimal top)
                => await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Shapes.addTextBox", isMultiLine, left, top);

            public static async Task<string> GetText(string controlName)
                => await JSRuntime.Current.InvokeAsync<string>("JSIntrop.Shapes.getText", controlName);

            public static async Task<bool> HideControl(string controlName)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.hideControl", controlName);

            public static async Task<bool> MoveControl(string controlName, decimal x, decimal y)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.moveControl", controlName, x, y);

            public static async Task<bool> RemoveControl(string controlName)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.removeControl", controlName);

            public static async Task<bool> SetControlText(string controlName, string text)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.setControlText", controlName, text);

            public static async Task<bool> SetControlSize(string controlName, decimal width, decimal height)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.setControlSize", controlName, width, height);

            public static async Task<bool> ShowControl(string controlName)
                => await JSRuntime.Current.InvokeAsync<bool>("JSIntrop.Shapes.showControl", controlName);
        }
    }
}
